<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CMakeLists 学习指南</title>
    <link href="/2023/07/25/CMakeLists-%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <url>/2023/07/25/CMakeLists-%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>三天速通！结合UGAS的CMakeLists食用更香捏！</p><span id="more"></span> <h4 id="上交教程："><a href="#上交教程：" class="headerlink" title="上交教程："></a>上交教程：</h4><p><a href="https://sjtu-robomaster-team.github.io/vision-learning-4-cmake-introduction/">https://sjtu-robomaster-team.github.io/vision-learning-4-cmake-introduction/</a></p><h4 id="完整教程："><a href="#完整教程：" class="headerlink" title="完整教程："></a>完整教程：</h4><p><a href="https://zhuanlan.zhihu.com/p/367808125">https://zhuanlan.zhihu.com/p/367808125</a></p><h4 id="核心语法："><a href="#核心语法：" class="headerlink" title="核心语法："></a>核心语法：</h4><p><a href="https://zhuanlan.zhihu.com/p/368701263">https://zhuanlan.zhihu.com/p/368701263</a></p><h3 id="速览：处理多源文件目录的方法"><a href="#速览：处理多源文件目录的方法" class="headerlink" title="速览：处理多源文件目录的方法"></a>速览：<code>处理多源文件目录的方法</code></h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-keyword">project</span> (hello_headers)<br><span class="hljs-comment">#设置了项目的名字为 hello_headers</span><br><br><span class="hljs-keyword">set</span>(SOURCES<br>    src/Hello.cpp<br>    src/main.cpp<br>)<br><span class="hljs-comment">#set 指令创建了一个变量，第一个参数为变量名 `SOURCES`，后面的参数就是这个变量所指代的内容</span><br><br><span class="hljs-keyword">add_executable</span>(hello_headers <span class="hljs-variable">$&#123;SOURCES&#125;</span>)<br><span class="hljs-comment"># $&#123;SOURCES&#125; 使用前面创建的变量来代替要进行编译的文件。</span><br><span class="hljs-comment"># hello_headers 指明了生成可执行文件需要的资源文件</span><br><span class="hljs-comment">#PRIVATE 关键字。</span><br><br><span class="hljs-keyword">target_include_directories</span>(hello_headers<br>    PRIVATE <br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span><br>)<br><span class="hljs-comment">#添加编译需要用到的头文件,hello_headers指明了需要的头文件的目录</span><br><span class="hljs-comment">#$&#123;PROJECT_SOURCE_DIR&#125;指明include文件所在的文件夹路径。(include文件夹所在的目录。)</span><br></code></pre></td></tr></table></figure><ul><li>关键字有三种，PRIVATE | PUBLIC | INTERFACE，不同的关键字在进行CMake编译后会生成不同的include 文件夹</li><li>在CMake中，变量的使用都是 ${变量名} 这种格式。</li><li>除了README.md文件是用来讲解的文件外，另外几个文件都是要进行编译的。</li><li>${PROJECT_SOURCE_DIR}指当前项目的顶级(上级)源目录,则在编写程序时引用include里面的头文件可以直接写头文件名，不用写相对路径了</li><li>${CMAKE_CXX_FLAGS} C++编译器的编译选项。具体常用选项有：<ul><li><code>-rdynamic</code> 通知链接器将所有符号添加到动态符号表，通过使用 dlopen 来实现向后跟踪</li><li><code>-O3</code> 开启优化</li><li><code>-fPIC</code> 编译器产生与位置无关代码，即产生的代码中全部使用相对地址</li><li><code>-ggdb</code> 编译器生成gdb专用的更为丰富的调试信息</li><li><code>-std=c++11</code></li><li><code>-Wall</code> 编译后显示所有警告<br>  （还有一些不太常用的，网址自查：<a href="https://blog.csdn.net/m0_51551385/article/details/125083575?ydreferer=aHR0cHM6Ly9jbi5iaW5nLmNvbS8=%EF%BC%89">https://blog.csdn.net/m0_51551385/article/details/125083575?ydreferer=aHR0cHM6Ly9jbi5iaW5nLmNvbS8%3D）</a></li></ul></li></ul><p><code>编译指令：</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">mkdir</span> build<br><br><span class="hljs-keyword">cd</span> build<br><br>cmake ..<br><br><span class="hljs-keyword">make</span><br></code></pre></td></tr></table></figure><p>编译完成后，在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./hello_headers<br></code></pre></td></tr></table></figure><p>就可以运行程序文件。</p><h3 id="高级点的语法："><a href="#高级点的语法：" class="headerlink" title="高级点的语法："></a>高级点的语法：</h3><h4 id="递归搜索所有的-cpp文件并将列表存储在一个变量中"><a href="#递归搜索所有的-cpp文件并将列表存储在一个变量中" class="headerlink" title="递归搜索所有的.cpp文件并将列表存储在一个变量中:"></a>递归搜索所有的.cpp文件并将列表存储在一个变量中:</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">file(GLOB_RECURSE UGAS_SOURCE CONFIGURE_DEPENDS<br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span><span class="hljs-regexp">/src/</span>*.cpp<br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span><span class="hljs-regexp">/src/</span>*.cc)<br></code></pre></td></tr></table></figure><ul><li><code>CONFIGURE_DEPENDS</code><br>告知 CMake 有关配置过程的其他输入文件的信息。如果修改了任何命名文件，生成系统将重新运行 CMake 以重新配置文件并再次生成生成系统。<br>将文件指定为以分号分隔的路径列表。</li><li><code>configure_file</code>：通过读取输入文件中的内容，将 CMakeLists.txt 文件中的变量转变为 C&#x2F;C++ 中可识别的宏定义，然后存入输出文件中。<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">configure<span class="hljs-constructor">_file(&lt;<span class="hljs-params">input</span>&gt; &lt;<span class="hljs-params">output</span>&gt;)</span><br></code></pre></td></tr></table></figure>具体参考：<a href="https://zhuanlan.zhihu.com/p/436923370">https://zhuanlan.zhihu.com/p/436923370</a></li></ul><p>输入文件为 xxx（目录路径）-config.h.in<br>输出文件为 xxx-config.h</p><h4 id="选项开关："><a href="#选项开关：" class="headerlink" title="选项开关："></a>选项开关：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">option</span><span class="hljs-params">(&lt;OPTION_NAME&gt; <span class="hljs-string">&quot;&lt;help_text&gt;&quot;</span> [value])</span></span><br></code></pre></td></tr></table></figure><p>第一个参数为选项名称。此选项不仅可以是boolean，也可以是string或list。</p><p>第二个参数为选项介绍，为string。</p><p>第三个参数为选项默认值，依据选项类型设置。</p><ul><li>条件分支：<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">if</span> (CONDITION_1)<br>    <span class="hljs-meta"># do something</span><br><span class="hljs-keyword">elseif</span> (CONDITION_2)<br>    <span class="hljs-meta"># do something</span><br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-meta"># do something</span><br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure></li></ul><h4 id="find-package"><a href="#find-package" class="headerlink" title="find_package"></a><code>find_package</code></h4><p>查找并载入一个外部包</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">find_package(&lt;PackageName&gt; <span class="hljs-comment">[version]</span> <span class="hljs-comment">[EXACT]</span> <span class="hljs-comment">[QUIET]</span> <span class="hljs-comment">[MODULE]</span><br>             <span class="hljs-comment">[REQUIRED]</span> <span class="hljs-comment">[<span class="hljs-comment">[COMPONENTS]</span> <span class="hljs-comment">[components...]</span>]</span><br>             <span class="hljs-comment">[OPTIONAL_COMPONENTS components...]</span><br>             <span class="hljs-comment">[NO_POLICY_SCOPE]</span>)<br></code></pre></td></tr></table></figure><p>最常用用法:<br>find_package(OpenCV 4.7 REQUIRED) <br>find_package(HikCameraSDK REQUIRED)<br>查找名为 XX 的包，找不到就报错（并终止 cmake 进程，不再继续往下执行）。</p><ul><li>include_directories<br>cmake使用 include_directories是用来 提供搜索头文件路径</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">include_directories (<span class="hljs-selector-attr">[AFTER|BEFORE]</span> <span class="hljs-selector-attr">[SYSTEM]</span> dir1 <span class="hljs-selector-attr">[dir2 ...]</span>)<br></code></pre></td></tr></table></figure><h4 id="在ROS2环境下编译："><a href="#在ROS2环境下编译：" class="headerlink" title="在ROS2环境下编译："></a>在ROS2环境下编译：</h4><ul><li>生成目标文件，并且不需要再使用target_link_libraries  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ament_auto_add_executable</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">ament_auto_add_library</span><br></code></pre></td></tr></table></figure></li><li><code>ament_auto_find_build_dependencies</code><br>  ROS2环境下的链接库方式，相当于不用写find_package了。（ROS之前连接库的指令）</li><li><code>ament_auto_package</code><br>  这个用来代替以前的export（导出库）和两次install（安装库），以及最后的ament_package</li></ul><ul><li><code>link_directories</code><br>链接库；添加需要链接的库文件路径之后就可以使用相对路径，使用TARGET_LINK_LIBRARIES时，只需给出动态链接库名即可。</li><li><code>target_link_libraries </code><ul><li>如果所有目标都使用相关的include目录，则需要使用link_libraries;<br>如果路径是特定于目标，就用target_link_libraries </li><li>如果所有目标都使用相关的include目录，则需要使用link_libraries；<br>如果路径是特定于目标，就用target_link_libraries</li></ul></li></ul><ol start="6"><li><code>DEBUG</code>时使用的命令：</li></ol><ul><li><p>打印变量信息</p><ul><li>SET(USER_KEY, “Hello World”)\</li></ul></li></ul><p>#设置变量</p><ul><li>MESSAGE( STATUS “this var key &#x3D; ${USER_KEY}.”)</li><li>message([<mode>] “message text” …)</li></ul><p>UGAS的CMakeLists.txt参考：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.12</span>)<br><span class="hljs-keyword">project</span>(ugas VERSION <span class="hljs-number">1.0</span> LANGUAGES C CXX)<br><br><span class="hljs-comment"># Set compilation flags</span><br><span class="hljs-keyword">set</span>(CMAKE_BUILD_TYPE Release)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_C_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -O3&quot;</span>)<br><br><span class="hljs-keyword">if</span>(CMAKE_COMPILER_IS_GNUCXX <span class="hljs-keyword">OR</span> CMAKE_CXX_COMPILER_ID <span class="hljs-keyword">MATCHES</span> <span class="hljs-string">&quot;Clang&quot;</span>)<br>    <span class="hljs-keyword">add_compile_options</span>(-Wall -Wextra -Wpedantic)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-keyword">set</span>(CMAKE_MODULE_PATH <span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/cmake)<br><br><span class="hljs-comment"># Set configure_file</span><br><span class="hljs-keyword">set</span> (CONFIGURE_DIR_PATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/build/config)<br><span class="hljs-keyword">configure_file</span> (<br>        <span class="hljs-string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/src/config.h.in&quot;</span><br>        <span class="hljs-string">&quot;$&#123;CONFIGURE_DIR_PATH&#125;/config.h&quot;</span>)<br><br><span class="hljs-comment"># Initialize custom options</span><br><span class="hljs-keyword">option</span> (ENABLE_DEBUG_CANVAS <span class="hljs-string">&quot;Enable debug canvas to draw debug image&quot;</span> <span class="hljs-keyword">OFF</span>)<br><span class="hljs-keyword">option</span> (ENABLE_RECORDING <span class="hljs-string">&quot;Enable recording of raw camera image&quot;</span> <span class="hljs-keyword">OFF</span>)<br><span class="hljs-keyword">option</span> (ENABLE_OPENVINO <span class="hljs-string">&quot;Enable openvino to identify buff&quot;</span> <span class="hljs-keyword">OFF</span>)<br><span class="hljs-keyword">option</span> (ENABLE_ROS <span class="hljs-string">&quot;Enable ROS to visualize positions&quot;</span> <span class="hljs-keyword">OFF</span>)<br><br><span class="hljs-comment"># Set the output executable file name:</span><br><span class="hljs-comment"># When compiling in the ROS environment, the output executable file name will be the node name.</span><br><span class="hljs-comment"># Otherwise, the output file name will be the project name.</span><br><span class="hljs-keyword">if</span> (ENABLE_ROS)<br>    <span class="hljs-keyword">set</span>(EXECUTABLE_NAME main)<br><span class="hljs-keyword">else</span> ()<br>    <span class="hljs-keyword">set</span>(EXECUTABLE_NAME <span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>)<br>    <span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/build)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># Find non-ros packages</span><br><span class="hljs-keyword">find_package</span>(OpenCV <span class="hljs-number">4.7</span> REQUIRED)<br><span class="hljs-keyword">find_package</span>(HikCameraSDK REQUIRED)<br><br><span class="hljs-keyword">if</span> (ENABLE_OPENVINO)<br>    <span class="hljs-keyword">find_package</span>(OpenVINO REQUIRED)<br>    <span class="hljs-keyword">set</span>(OpenVINO_LIB openvino::runtime)<br><span class="hljs-keyword">endif</span> (ENABLE_OPENVINO)<br><br><span class="hljs-comment"># Include project source directory</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src <span class="hljs-variable">$&#123;CONFIGURE_DIR_PATH&#125;</span>)<br><br><span class="hljs-comment"># Recursively search for all source files under the &#x27;src&#x27; folder and store them into UGAS_SOURCE variable</span><br><span class="hljs-comment"># Flag &#x27;CONFIGURE_DEPENDS&#x27; asks cmake to detect GLOB result changes so no need to rerun cmake when adding a new source file.</span><br><span class="hljs-keyword">file</span>(GLOB_RECURSE UGAS_SOURCE CONFIGURE_DEPENDS<br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/*.cpp<br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/*.cc)<br><br><span class="hljs-comment"># Find ros packages &amp; add source files to compilation</span><br><span class="hljs-keyword">if</span> (ENABLE_ROS)<br>    <span class="hljs-keyword">find_package</span> (ament_cmake_auto REQUIRED)<br>    ament_auto_find_build_dependencies ()<br>    ament_auto_add_executable(<span class="hljs-variable">$&#123;EXECUTABLE_NAME&#125;</span> <span class="hljs-variable">$&#123;UGAS_SOURCE&#125;</span>)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;EXECUTABLE_NAME&#125;</span> <span class="hljs-variable">$&#123;UGAS_SOURCE&#125;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># Link libraries</span><br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;EXECUTABLE_NAME&#125;</span> <span class="hljs-variable">$&#123;OpenCV_LIBS&#125;</span> <span class="hljs-variable">$&#123;HikCameraSDK_LIB&#125;</span> <span class="hljs-variable">$&#123;OpenVINO_LIB&#125;</span> -lpthread)<br><br><span class="hljs-comment"># Install package</span><br><span class="hljs-keyword">if</span> (ENABLE_ROS)<br>    ament_auto_package()<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>my technology stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu使用技巧</title>
    <link href="/2023/07/25/Ubuntu%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/07/25/Ubuntu%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>一些使用技巧和操作命令整理合集</p><span id="more"></span> <h3 id="在-Ubuntu-Linux-上安装-Deb-文件的-3-种方法"><a href="#在-Ubuntu-Linux-上安装-Deb-文件的-3-种方法" class="headerlink" title="在 Ubuntu Linux 上安装 Deb 文件的 3 种方法"></a>在 Ubuntu Linux 上安装 <code>Deb</code> 文件的 3 种方法</h3><blockquote><ol><li>使用软件中心安装</li><li>使用命令行安装：</li></ol></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">sudo apt install path<span class="hljs-emphasis">_to_deb_file</span><br><span class="hljs-emphasis">或者</span><br><span class="hljs-emphasis">sudo dpkg -i path_to_deb_</span>file<br></code></pre></td></tr></table></figure><p>在这两个命令中，使用已下载的 deb 文件的路径和名称来替换 path_to_deb_file 。</p><h3 id="关于权限和存储"><a href="#关于权限和存储" class="headerlink" title="关于权限和存储"></a>关于权限和存储</h3><p>访问权限：</p><ul><li><p>读取 <code>r</code> ：数字表示 4，允许查看、下载文件内容、显示目录列表；</p></li><li><p>写入 <code>w</code> ：数字表示 2，允许修改文件内容，允许在目录中新建、移动、删除文件或子目录；</p></li><li><p>可执行 <code>x</code> ：数字表示 1，允许运行程序、切换目录。</p></li></ul><p>归属（所有权）</p><ul><li>属主：拥有该文件或目录的用户帐号；</li><li>属组：拥有该文件或目录的组帐号。</li></ul><p>操作对象</p><pre><code class="hljs">u 文件属主权限g 同组用户权限o 其它用户权限a 所有用户（包括以上三种）s（setuid）：该位是让普通用户可以以 root 用户的角色运行只有 root 帐号才能运行的程序或命令</code></pre><p>权限设定</p><pre><code class="hljs">+ 增加权限- 取消权限= 设置权限</code></pre><h3 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h3><h4 id="相对路径的表现形式"><a href="#相对路径的表现形式" class="headerlink" title="相对路径的表现形式"></a>相对路径的表现形式</h4><ul><li>绝对路径：从 &#x2F; （根目录）为起点的路径。</li><li>相对路径：以当前目录为起点（当前文件所在的路径相对于其它文件或文件夹的路径关系）。</li></ul><table><thead><tr><th>命令行</th><th>说明</th></tr></thead><tbody><tr><td>直接使用目录名或文件名</td><td>表示当前工作目录中的子目录、文件的位置</td></tr><tr><td>.开头</td><td>表示以当前的工作目录作为起点，如 .&#x2F;etc</td></tr><tr><td>..开头</td><td>表示以当前目录的上一级目录（父目录）作为起点，如 ..&#x2F;etc</td></tr><tr><td>以 “~用户名” 形式开头</td><td>表示以指定用户名的宿主目录作为起点</td></tr><tr><td>以 “~” 形式开头</td><td>表示以当前用户的宿主目录作为起点</td></tr></tbody></table><h4 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a><code>cd</code> 命令</h4><table><thead><tr><th>命令行</th><th>说明</th></tr></thead><tbody><tr><td>cd&#x2F;</td><td>切换到系统根目录</td></tr><tr><td>cd~或cd</td><td>切换到当前用户的宿主目录（家目录）</td></tr><tr><td>cd-</td><td>切换到 上一次执行cd命令 之前所在的目录</td></tr></tbody></table><h4 id="ls-命令：用于显示指定工作目录下的文件及子目录"><a href="#ls-命令：用于显示指定工作目录下的文件及子目录" class="headerlink" title="ls 命令：用于显示指定工作目录下的文件及子目录"></a><code>ls</code> 命令：用于显示指定工作目录下的文件及子目录</h4><p>可使用命令 ls –help、man ls 查看所有参数。</p><p><a href="https://blog.csdn.net/duanbaoke/article/details/115462030">https://blog.csdn.net/duanbaoke/article/details/115462030</a></p><blockquote><p>3.1  通配符:参数可结合通配符一起使用。</p></blockquote><table><thead><tr><th>命令行</th><th>说明</th></tr></thead><tbody><tr><td>？</td><td>代表任意一个字符，只能占一个字符；</td></tr><tr><td>*</td><td>代表任意数个字符，可以是0个或多个；</td></tr><tr><td>[]</td><td>表示可以匹配字符组中的任意一个字符，每个通配符只匹配一次，多个通配符可一起使用，不区分大小写。如ls [abc]，ls [a-c]，ls [1ab][1ab]。</td></tr></tbody></table><blockquote><p>3.2 ls-l:查看某一个目录会得到一个7个字段的列表。</p></blockquote><h4 id="alias：设置命令的别名"><a href="#alias：设置命令的别名" class="headerlink" title="alias：设置命令的别名"></a><code>alias</code>：设置命令的别名</h4><p><code>alias [别名]=‘指令名称’ </code>，等于号左右不能有空格，指令名称必须是可执行的完整的命令；</p><p>参数：若不加任何参数，则列出目前所有的别名设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span> 命令别名      <span class="hljs-comment">#查看别名</span><br><br><span class="hljs-built_in">unalias</span> 命令别名   <span class="hljs-comment">#取消命令别名</span><br></code></pre></td></tr></table></figure><h4 id="du-选项-文件或目录"><a href="#du-选项-文件或目录" class="headerlink" title="du [选项] [文件或目录...] \"></a><code>du [选项] [文件或目录...] </code>\</h4><p>统计指定目录（或文件）所占用磁盘空间的大小。</p><p>有-a,-s,-h,-c,–math-depth&#x3D;n等选项，要用自己查</p><h4 id="修改权限命令：chmod"><a href="#修改权限命令：chmod" class="headerlink" title="修改权限命令：chmod"></a>修改权限命令：<code>chmod</code></h4><p>命令格式：<code>chmod [ugoa][+-=][rwx]文件或目录 </code>；<br>或用数字表示：<code>chmod [777] </code>文件或目录 ，默认为操作所有用户a；</p><p> 常用格式： <code>-R</code>：递归修改指定目录下所有子项的权限；</p><h4 id="设置目录和文件的默认权限-umask"><a href="#设置目录和文件的默认权限-umask" class="headerlink" title="设置目录和文件的默认权限 umask"></a>设置目录和文件的默认权限 <code>umask</code></h4><p>umask查看：umask<br>umask设置：umask 000，umask 022 #新建目录或者文件，再查看权限</p><p>umask（权限反码） 作用：</p><ul><li>控制新建的文件或者目录的权限默认值</li><li>默认权限去除umask的权限为新建的文件或者目录的权限</li></ul><p>新建的文件或者目录的权限为默认最大权限减去umask权限。<br>umask 默认值为 <code>022</code>，普通文件的最大默认权限.为 <code>666</code>，目录的最大默认权限为 <code>777</code>;</p><h4 id="ln"><a href="#ln" class="headerlink" title="ln - \"></a><code>ln -</code> \</h4><p>为文件或目录创建链接文件，在文件之间建立连接。</p><p>链接文件类型：</p><ul><li>软链接（符号链接）(symbolic link):产生一个特殊的档案，该档案的内容是指向另一个档案的位置</li><li>硬链接(hard link):一个档案可以有多个文件名（一个文件可以有好几个文件名，只有将最后一个文件名从 磁盘上删除，才能把这个文件删掉）</li></ul><p>知识点：<br>参考：<a href="https://blog.csdn.net/duanbaoke/article/details/115485100">https://blog.csdn.net/duanbaoke/article/details/115485100</a></p><ul><li>在Linux中，文件名和文件类型是分开存储的，</li><li>在Linux中，只有文件的<code>硬链接数==0</code> 才会被删除</li><li>使用 ls -l 可以查看一个文件的硬链接数量<br>在日常工作中，几乎不会创建文件的硬链接，只有超级用户才能建立目录的硬连接。</li><li>硬链接是存在同一个档案系统中，而软链接却可以跨越不同的档案系统</li><li>ln- 在文件间产生连接。默认产生硬链接，有-s选项，则产生软链接：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">创建硬链接：<span class="hljs-built_in">ln</span> 源文件 目标位置<br><span class="hljs-built_in">ln</span> -s 源文件或目录名... 链接文件或目标位置<br></code></pre></td></tr></table></figure></li></ul><h4 id="cp"><a href="#cp" class="headerlink" title="cp\"></a><code>cp</code>\</h4><p>将需要复制的文件或目录（源）重建一份，并保存为新的文件或目录。</p><p><code>cp[选项]...源文件或目录.…目标文件或目录...</code><br>-f,-i,-p,-r四个选项。<br>注：复制多个文件或目录时，目标位置必须是目录，且目标目录必须已存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -p test.rb /home/test <br><span class="hljs-comment">#将test.rb copy到test目录，并且保留原文件的属性</span><br><br><span class="hljs-built_in">cp</span> -p test.rb /home/test/haha.rp  <br><span class="hljs-comment">#将test.rb copy到test目录，并将文件名修改为haha.rp</span><br><br><span class="hljs-built_in">cp</span> -r Dir/ /home/test      <br><span class="hljs-comment">#将Dir目录copy到test目录下</span><br><br><span class="hljs-built_in">cp</span> -fr Dir/* /home/test    <br><span class="hljs-comment">#将Dir下面的所有文件强制copy到test目录下</span><br><br><span class="hljs-built_in">cp</span> /root/&#123;1,2,3&#125;.txt ./    <br><span class="hljs-comment">#批量复制三个同扩展文件到当前目录</span><br><br><span class="hljs-built_in">cp</span> test.rb&#123;,.bak&#125;          <br><span class="hljs-comment">#备份test.rb，并在尾部加上.bak后缀</span><br></code></pre></td></tr></table></figure><h4 id="rm-删除-unlink-文件"><a href="#rm-删除-unlink-文件" class="headerlink" title="rm :删除 (unlink) 文件"></a><code>rm</code> :删除 (unlink) 文件</h4><p>常用选项：-f,-i,-r</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> test.php        <span class="hljs-comment">#删除文件需要确认</span><br><br><span class="hljs-built_in">rm</span> -f test.php     <span class="hljs-comment">#强制删除文件不确认</span><br><br><span class="hljs-built_in">rm</span> -rfv ./test     <span class="hljs-comment">#递归强制删除当前的test目录，并显示删除的详细过程</span><br><br><span class="hljs-built_in">rm</span> -rf aa/         <span class="hljs-comment">#递归强制删除aa目录下的所有</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>删除文件可以直接使用 rm 命令，若删除目录则必须配合选项 “ -r “，因为目录下有 . 和 .. 两个隐藏子目录；</li><li>不要直接删除系统中已有的目录或配置文件，以避免出现意外故障；</li><li>删除目录下文件时建议最好先切换到目录下再执行 rm -rf 命令 <br>（ 1 . cd aa 2 . rm -rf aa&#x2F;）</li></ul><h4 id="mv：-移动文件或目录、对单个文件进行重命名。"><a href="#mv：-移动文件或目录、对单个文件进行重命名。" class="headerlink" title="mv： 移动文件或目录、对单个文件进行重命名。\"></a><code>mv</code>： 移动文件或目录、对单个文件进行重命名。\</h4><p><code>mv [选项] 源文件或目录 目标文件或目录</code></p><ul><li>将指定的文件或目录转移位置；</li><li>如果目标位置与源位置相同，则相当于重命名操作。</li></ul><h4 id="rename-批量修改文件名"><a href="#rename-批量修改文件名" class="headerlink" title="rename:批量修改文件名"></a><code>rename</code>:批量修改文件名</h4><p><code>rename 旧字符 新字符 文件名</code><br><code>rename 旧文件 新文件 目标文件</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">rename</span> <span class="hljs-keyword">abc</span> def <span class="hljs-keyword">abc</span>    # 修改 <span class="hljs-keyword">abc</span> 名字为 dec<br></code></pre></td></tr></table></figure><h4 id="tree：在终端输入下面的指令查看文件结构"><a href="#tree：在终端输入下面的指令查看文件结构" class="headerlink" title="tree：在终端输入下面的指令查看文件结构"></a><code>tree</code>：在终端输入下面的指令查看文件结构</h4><p>安装tree:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> tree<br></code></pre></td></tr></table></figure><h3 id="仓库克隆"><a href="#仓库克隆" class="headerlink" title="仓库克隆"></a>仓库克隆</h3><p> linux 系统下 <code>github 仓库的克隆</code>可以直接在终端通过指令克隆。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ttroy50/</span>cmake-examples.git cmake-examples<br></code></pre></td></tr></table></figure><p>第一行是跳转至 home 目录，第二行是将github链接地址的内容克隆到 cmake-example 目录下，输入后会自动新建一个cmake-example 目录并把下载的代码放进去，十分方便。</p>]]></content>
    
    
    
    <tags>
      
      <tag>my technology stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>相机标定</title>
    <link href="/2023/07/25/%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/"/>
    <url>/2023/07/25/%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p>几步完成相机标定！（图传也有相机，也可以标定）</p><span id="more"></span> <ul><li>step 1:打印标定板（不能有折痕，要哑光纸打印，A3大小），贴在碳板上，一定要平整。</li><li>step 2:用需要标定的相机拍照，设定好需要的分辨率，拍20-30张不同角度的标定板照片，要求标定板要占大部分相片区域（80%以上）</li><li>step 3:使用matlab进行标定。<br>关于options：<ul><li>(1)Radial Distortion：径向畸变<br> 2 Coefficients选项:使用四次多项式来估计透镜的径向畸变,适用于一般相机<br> 3 Coefficients选项:使用六次多项式来估计透镜的径向畸变,仅适用于大视场相机</li><li>(2)Compute：<br> 关于Skew:假设X轴和Y轴不垂直。这意味着图像像素不是矩形的。所以，Skew选项一般不需要选择<br> 关于Tangential Distortion：当镜头的主轴与相机传感器不垂直时，会发生切向失真<br><code>选择options的要求是使平均误差尽量小，低于0.5为可用</code></li></ul></li><li>step 4：将matlab标定得到的畸变参数写成opencv可用的畸变系数的排列（k<sub>1</sub>,k<sub>2</sub>,p<sub>1</sub>,p<sub>2</sub>,k<sub>3</sub>）,其中三个径向畸变，两个切向畸变<ul><li>RadialDistortion里面的两个参数对应k<sub>1</sub>和k<sub>2</sub>，k<sub>3</sub>为0（对于鱼眼镜头等径向畸变特别大的才需要计算k3）</li><li>TangentialDistortion里面的两个参数对应p<sub>1</sub>,p<sub>2</sub></li><li>记录大疆图传相机数据：<br>  畸变系数：（-0.285400532140372、0.106341621768377、 0、0、   -0.0203255154424868）<br>  内参矩阵:(matlab直接计算得到)<br>$$\begin{matrix}<br>870.536594077599&amp;0&amp;0\<br>0&amp;871.002811118890&amp;0\<br>959.879173875982&amp;554.055610210946&amp;1\<br>\end{matrix}$$<br>需要将上方的内参矩阵转置之后才能给opencv使用：<br>$$\begin{matrix}<br>870.536594077599&amp;0&amp;959.879173875982\<br>0&amp;871.00281111889&amp;554.055610210946\<br>0&amp;0&amp;1\<br>\end{matrix}$$</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>some skills about cv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim</title>
    <link href="/2023/07/25/vim/"/>
    <url>/2023/07/25/vim/</url>
    
    <content type="html"><![CDATA[<p>vim共分为3种模式，分别是<code>命令模式</code>、<code>输入模式</code>、<code>底线命令模式</code>。</p><span id="more"></span> <h4 id="1-命令模式"><a href="#1-命令模式" class="headerlink" title="1. 命令模式"></a>1. 命令模式</h4><p>启动vim，默认进入命令模式。此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。<br>常用命令：</p><ul><li><code>i</code> 切换到输入模式，以输入字符。</li><li><code>x</code> 删除当前光标所在处的字符。</li><li><code>:</code> 切换到底线命令模式，以在最底一行输入命令。</li></ul><h4 id="2-输入模式"><a href="#2-输入模式" class="headerlink" title="2. 输入模式"></a>2. 输入模式</h4><p>正常输入即可。<br>按<code>ESC</code>退出输入模式，切换到命令模式。</p><h4 id="3-底线命令模式"><a href="#3-底线命令模式" class="headerlink" title="3. 底线命令模式"></a>3. 底线命令模式</h4><p>在命令模式下按下 <code>:</code>（英文冒号）进入底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，基本命令（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li><li>wq 保存并退出<br>按<code>ESC</code>退出底线命令模式。</li></ul><h4 id="4-实例"><a href="#4-实例" class="headerlink" title="4. 实例"></a>4. 实例</h4><p>step1 :在终端输入：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vim</span> runoob.txt<br></code></pre></td></tr></table></figure><p>使用vim建立一个名为 runoob.txt 的文件。<br>直接输入 vim 文件名 就能够进入 vi 的一般模式了。<br><code>记得 vi 后面一定要加文件名，不管该文件存在与否！</code></p><p>step 2:按<code>i</code>进入编辑模式，编辑文件内容</p><p>step 3:按<code>ESC</code>退出编辑模式</p><p>step 4：按<code>:wq</code>保存退出</p>]]></content>
    
    
    
    <tags>
      
      <tag>some tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>creat your own blogs</title>
    <link href="/2023/07/25/creat-your-own-blogs/"/>
    <url>/2023/07/25/creat-your-own-blogs/</url>
    
    <content type="html"><![CDATA[<p>通过github创建自己的博客</p><span id="more"></span> <p><a href="https://blog.csdn.net/Dabie_haze/article/details/117407833/">https://blog.csdn.net/Dabie_haze/article/details/117407833\</a><br><a href="https://zhuanlan.zhihu.com/p/111614119">https://zhuanlan.zhihu.com/p/111614119</a></p><p>补充：</p><ul><li>安装npm的教程：<br><a href="https://blog.csdn.net/yyuggjggg/article/details/120836231#:~:text=1.%E5%8F%8C%E5%87%BB%202%EF%BC%9A%E6%8C%89%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C%203%EF%BC%9A%E6%8C%89%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C%204%EF%BC%9A%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%EF%BC%8C%E7%82%B9%E5%87%BB%E4%B8%8B%E4%B8%80%E6%AD%A5,5%E7%82%B9%E5%87%BBnext%EF%BC%8C%E5%85%B6%E4%BA%92%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%206.%E6%8E%A5%E4%B8%8B%E6%9D%A5%E4%B8%80%E7%9B%B4%E6%98%AF%E2%80%9Cnext%E2%80%9D%EF%BC%8C%E7%9B%B4%E5%88%B0%E6%9C%80%E5%90%8E%E7%82%B9%E5%87%BBfinish%207.%E6%9F%A5%E7%9C%8B%E5%90%84%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%AE%E5%BD%95%208.%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%AD%A3%E5%B8%B8">https://blog.csdn.net/yyuggjggg/article/details/120836231#:~:text=1.%E5%8F%8C%E5%87%BB%202%EF%BC%9A%E6%8C%89%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C%203%EF%BC%9A%E6%8C%89%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C%204%EF%BC%9A%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%EF%BC%8C%E7%82%B9%E5%87%BB%E4%B8%8B%E4%B8%80%E6%AD%A5,5%E7%82%B9%E5%87%BBnext%EF%BC%8C%E5%85%B6%E4%BA%92%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%206.%E6%8E%A5%E4%B8%8B%E6%9D%A5%E4%B8%80%E7%9B%B4%E6%98%AF%E2%80%9Cnext%E2%80%9D%EF%BC%8C%E7%9B%B4%E5%88%B0%E6%9C%80%E5%90%8E%E7%82%B9%E5%87%BBfinish%207.%E6%9F%A5%E7%9C%8B%E5%90%84%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%AE%E5%BD%95%208.%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%AD%A3%E5%B8%B8</a></li><li>npm使用国内淘宝镜像的方法：<br><a href="https://blog.csdn.net/DongShanYuXiao/article/details/129902599">https://blog.csdn.net/DongShanYuXiao/article/details/129902599</a></li><li>获取&#x2F;更新SSH：<br><a href="https://blog.csdn.net/qq_36667170/article/details/79094257">https://blog.csdn.net/qq_36667170/article/details/79094257</a></li><li>Hexo初始化报错：</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">fatal: could not <span class="hljs-keyword">create</span> <span class="hljs-keyword">work</span> tree dir <span class="hljs-string">&#x27;C:\Program Files\Hexo_blog\hexo\ZoeChen04616.github.io&#x27;</span>: Permission denied<br><br></code></pre></td></tr></table></figure><p>是权限不够，不能新建文件夹所以不能建立工作目录。在文件夹属性-安全-user找写入权限添加上就好。</p><ul><li><p>Hexo部署时报错：Error: Spawn failed<br> <a href="https://blog.csdn.net/qq_45020818/article/details/126949337">https://blog.csdn.net/qq_45020818/article/details/126949337</a> </p></li><li><p>关于hexo博客更换主题：<br><a href="https://zhuanlan.zhihu.com/p/385525053">https://zhuanlan.zhihu.com/p/385525053</a></p></li><li><p>一些主题推荐：<br><a href="https://zhuanlan.zhihu.com/p/137679728/">https://zhuanlan.zhihu.com/p/137679728\</a><br><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></li><li><p>hexo常用口令：</p><ul><li><code>hexo clean</code> : 清除缓存</li><li><code>hexo g</code>：生成静态网页</li><li><code>hexo d</code>：同步远程github仓库</li><li><code>hexo s</code>：本地预览效果</li><li><code>hexo new post &quot;article title&quot;</code> ： 新建一篇文章</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>some skills about web</tag>
      
      <tag>hexo</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>积累向的视觉小知识</title>
    <link href="/2023/07/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E8%A7%86%E8%A7%89%E6%95%99%E7%A8%8B/"/>
    <url>/2023/07/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E8%A7%86%E8%A7%89%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>没有特定的主题，遇到有啥不会的就往里补充。</p><span id="more"></span> <h4 id="1-O1-O2-O3-Os优化（gcc）"><a href="#1-O1-O2-O3-Os优化（gcc）" class="headerlink" title="1.-O1,-O2,-O3,-Os优化（gcc）"></a>1.-O1,-O2,-O3,-Os优化（gcc）</h4><ol><li><p>使用-Q –help &#x3D;optimizers来获取每个优化标识所启用的优化选项。</p></li><li><p>解释：</p><blockquote><ol><li>-O，-O1：</li></ol></blockquote></li></ol><p>这两个命令的效果是一样的，目的都是在不影响编译速度的前提下，尽量采用一些优化算法降低代码大小和可执行代码的运行速度。</p><blockquote><ol start="2"><li>-O2:</li></ol></blockquote><p>该优化选项会牺牲部分编译速度，除了执行-O1所执行的所有优化之外，还会采用几乎所有的目标配置支持的优化算法，用以提高目标代码的运行速度。</p><blockquote><ol start="3"><li>-O3:</li></ol></blockquote><p>该选项除了执行-O2所有的优化选项之外，一般都是采取很多向量化算法，提高代码的并行执行程度，利用现代CPU中的流水线，Cache等。</p><p>这个选项会提高执行代码的大小，当然会降低目标代码的执行时间。</p><blockquote><ol start="4"><li>-Os:</li></ol></blockquote><p>这个优化标识和-O3有异曲同工之妙，当然两者的目标不一样，-O3的目标是宁愿增加目标代码的大小，也要拼命的提高运行速度，但是这个选项是在-O2的基础之上，尽量的降低目标代码的大小，这对于存储容量很小的设备来说非常重要。为了降低目标代码大小，会禁用下列优化选项，一般就是压缩内存中的对齐空白(alignment padding)</p><blockquote><ol start="5"><li>-Ofast:</li></ol></blockquote><p>该选项将不会严格遵循语言标准，除了启用所有的-O3优化选项之外，也会针对某些语言启用部分优化。如：-ffast-math </p><blockquote><ol start="6"><li>-Og:</li></ol></blockquote><p>该标识会精心挑选部分与-g选项不冲突的优化选项，当然就能提供合理的优化水平，同时产生较好的可调试信息和对语言标准的遵循程度。</p><h4 id="2-动态连接库-共享库-和静态连接库"><a href="#2-动态连接库-共享库-和静态连接库" class="headerlink" title="2.动态连接库(共享库)和静态连接库"></a>2.动态连接库(共享库)和静态连接库</h4><p>1.静态链接库 <code>＊.a</code><br>将需要调用的函数统一链接到可执行文件中，成为可执行文件的一部分。</p><ul><li>优点：<br>运行速度快（因为已经链接到可执行文件中了）<br>不需要重新编译代码就可以链接<br>(因为已经和可执行文件链接在一起了，可执行文件调用链接库时可以直接跳转)</li><li>缺点：<br>占用内存，当多个程序调用相同的函数时，内存中就会存在该函数的多个备份</li></ul><p>2.动态链接库 <code>＊.so</code><br>仅加入被调函数的描述信息，当程序执行时由运行链接加载库。<br>仅当被装入内存时，才开始运行。相对于静态链接库，动态链接库只会在内存中保留一份。</p><ul><li>优点：不占用内存；可以实现进程之间的资源共享。<br>（因此动态库也称为共享库） </li><li>缺点：速度比静态的慢</li></ul><h4 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3.环境变量"></a>3.环境变量</h4><ol><li>定义：在操作系统中用来指定操作系统运行环境的一些参数，要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到path中指定的路径去找。<br>用户通过设置环境变量，来更好的运行进程。</li></ol><ul><li>windows系统中的环境变量：PATH<br>可以直接在终端输入echo %PATH%查看系统所有的环境变量</li><li>linux系统中的环境变量： export<br>可以直接在终端输入export查看系统所有的环境变量</li><li>暂时不管CMakeLists里面的环境变量</li></ul><ol start="2"><li>linux中，添加路径到环境变量里面的方法：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">echo <span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;~/.aspera/connect/bin/:<span class="hljs-variable">$PATH</span>&quot;</span> &gt;&gt;.bashrc<br></code></pre></td></tr></table></figure>即，添加到.bashrc的脚本中。（也可以用vim直接编辑.bashrc内容）</li></ol><ul><li><p>.bashrc是一个配置文件，也是一个隐藏文件，存在于用户的家目录~下，需要用<code>ls -a</code>才能查看到，每次登陆bash，这个文件就会被执行一次，在文件内的代码会被运行一遍。<br>参考：<a href="https://cloud.tencent.com/developer/article/1457751">https://cloud.tencent.com/developer/article/1457751</a></p></li><li><p>bash: 终端的那个框</p></li><li><p>echo 输出命令</p></li><li><p><code>&gt;&gt;</code>表示一个类似管道的意思</p></li></ul><h4 id="4-opencv配置环境"><a href="#4-opencv配置环境" class="headerlink" title="4.opencv配置环境"></a>4.opencv配置环境</h4><p>查看UGAS的opencv配置，后面新建项目如果要使用opencv，直接将.props文件复制粘贴到项目文件夹，再在VS里面<code>添加现有属性表</code>即可。</p><h4 id="5-分辨率"><a href="#5-分辨率" class="headerlink" title="5.分辨率"></a>5.分辨率</h4><p>分辨率只是数学上的一个概念，跟任何设备无关。<br>它仅仅是用来表示横向和纵向有多少个像素点而已，可以粗略理解为图片的尺寸以及清晰度。<br>参考：<a href="https://zhuanlan.zhihu.com/p/424498440">https://zhuanlan.zhihu.com/p/424498440</a><br> （分辨率？1080P、2K、4K?英寸？）</p><h4 id="6-image-distorition：图像畸变"><a href="#6-image-distorition：图像畸变" class="headerlink" title="6. image distorition：图像畸变"></a>6. image distorition：图像畸变</h4><h4 id="7-oop-python面向对象编程"><a href="#7-oop-python面向对象编程" class="headerlink" title="7. oop: python面向对象编程"></a>7. oop: python面向对象编程</h4><h4 id="8-markdown怎么写下标：例如k1"><a href="#8-markdown怎么写下标：例如k1" class="headerlink" title="8. markdown怎么写下标：例如k1"></a>8. markdown怎么写下标：例如k<sub>1</sub></h4><h4 id="9-markdown怎么表示矩阵："><a href="#9-markdown怎么表示矩阵：" class="headerlink" title="9.markdown怎么表示矩阵："></a>9.markdown怎么表示矩阵：</h4><p>$$\begin{matrix}<br>0&amp;1&amp;1\<br>1&amp;1&amp;0\<br>1&amp;0&amp;1\<br>\end{matrix}$$</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂七杂八</tag>
      
      <tag>some tips about cv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/25/hello-world/"/>
    <url>/2023/07/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>This is my very first post. </p><span id="more"></span> <p>I hope the blogs can record my learning journey, and through my learning journey, I could gradually enrich my little knowledge planet.</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
