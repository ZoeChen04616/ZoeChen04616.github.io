<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python</title>
    <link href="/2023/07/28/python%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/07/28/python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>记录python的学习过程~</p><span id="more"></span> <h2 id="pycharm配置python开发环境"><a href="#pycharm配置python开发环境" class="headerlink" title="pycharm配置python开发环境"></a>pycharm配置python开发环境</h2><p>参考：<br><a href="https://blog.csdn.net/yuhui_2000/article/details/109185168">https://blog.csdn.net/yuhui_2000/article/details/109185168</a></p><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h3><ul><li>单行注释以 ＃ 号开头</li><li>多行注释用两个三引号&#96;&#96;&#96;包含起来<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>  <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">2.  第一行注释</span><br><span class="hljs-string">3.  第二行注释</span><br><span class="hljs-string">4.  &#x27;&#x27;&#x27;</span><br><span class="hljs-number">5.</span>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello,World!&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-Python的行与缩进"><a href="#2-Python的行与缩进" class="headerlink" title="2. Python的行与缩进"></a>2. Python的行与缩进</h3><ul><li>使用缩进来表示代码块，不需要像C或者C++一样使用大括号。</li><li>缩进的空格数可变，但是同一个代码块的语句必须包含相同的缩进空格数</li><li>使用四个空格来表示一个缩进层级<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">if</span> x &gt; 0:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x is positive&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;positive number&quot;</span>) <br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x is zero or negative&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-多行语句"><a href="#3-多行语句" class="headerlink" title="3. 多行语句"></a>3. 多行语句</h3><p>Python 通常是一行写完一条语句；长语句可通过反斜杠（\）来实现多行语句。</p><h3 id="4-等待用户输入：input-函数"><a href="#4-等待用户输入：input-函数" class="headerlink" title="4. 等待用户输入：input() 函数"></a>4. 等待用户输入：input() 函数</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1.  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Who are you?&quot;</span>)<br>2.  you = input()<br>3.  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello!&quot;</span>)<br>4.  <span class="hljs-built_in">print</span>(you)<br></code></pre></td></tr></table></figure><h3 id="5-变量"><a href="#5-变量" class="headerlink" title="5. 变量"></a>5. 变量</h3><ul><li>变量命名和赋值：Python 的变量无须提前声明，赋值的同时也就声明了变量。<br>  eg:<code>a = 42</code></li><li>查询关键字：keyword模块中的kwlist是一个列表，存放了Python中所有的关键字(str格式)。<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean">#列出所有关键字<br><span class="hljs-keyword">import</span> keyword<br>keyword.kwlist <br><br>#判断是否为关键字，为真,返回<span class="hljs-literal">True</span>，为假,返回<span class="hljs-literal">False</span><br>keyword.iskeyword(<span class="hljs-string">&quot;break&quot;</span>)<br>keyword.iskeyword(<span class="hljs-string">&quot;breaka&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-数据类型"><a href="#6-数据类型" class="headerlink" title="6. 数据类型"></a>6. 数据类型</h3><p>Python 中拥有 6 大数据类型：number、string、list（列表）、tuple（元组）、sets （集合）、dictionary（字典）。</p><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>类型：int、float、bool、complex (复数)</p><p>使用 type() 函数来查看数字类型</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">a</span>=1 <span class="hljs-attribute">b</span>=3.14 <span class="hljs-attribute">c</span>=<span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(type(a)) <span class="hljs-built_in">print</span>(type(b)) <span class="hljs-built_in">print</span>(type(c))<br></code></pre></td></tr></table></figure><p>运算类型</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.  print((<span class="hljs-number">3</span>+<span class="hljs-number">1</span>))        #加法运算，输出结果是 <span class="hljs-number">4</span><br><span class="hljs-attribute">2</span>.  print((<span class="hljs-number">8</span>.<span class="hljs-number">4</span>-<span class="hljs-number">3</span>))      #减法运算，输出结果是<span class="hljs-number">5</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">3</span>.  print(<span class="hljs-number">15</span>/<span class="hljs-number">4</span>)         #除法运算，输出结果是 <span class="hljs-number">3</span>.<span class="hljs-number">75</span><br><span class="hljs-attribute">4</span>.  print(<span class="hljs-number">15</span>//<span class="hljs-number">4</span>)        #整除运算，输出结果是 <span class="hljs-number">3</span><br><span class="hljs-attribute">5</span>.  print(<span class="hljs-number">15</span>%<span class="hljs-number">4</span>)         #取余运算，输出结果是 <span class="hljs-number">3</span><br><span class="hljs-attribute">6</span>.  print(<span class="hljs-number">2</span>*<span class="hljs-number">3</span>)          #乘法运算，输出结果是 <span class="hljs-number">6</span><br><span class="hljs-attribute">7</span>.  print(<span class="hljs-number">2</span>**<span class="hljs-number">3</span>)         #乘方运算，输出结果是 <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>math 模块、cmath 模块:<br>数学运算常用的函数基本都在 math 模块、cmath 模块中。<br>要使用 math 或 cmath 函数必须先导入：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> math<br></code></pre></td></tr></table></figure><p>更多数学函数、三角函数、<code>pi</code>,<code>e</code>、随机数函数等，详细参考：<br><a href="https://www.runoob.com/python/python-numbers.html">https://www.runoob.com/python/python-numbers.html</a></p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>单引号与双引号的作用一样，但是当引号里包含单引号时，则该引号需使用双引号；三引号可以指示一个多行的字符串，也可以在三引号中自由使用单引号和双引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#单引号示例</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;welcome to hangzhou&#x27;</span>)<br><span class="hljs-comment">#双引号示例</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;what’s your name?&quot;</span>)<br><span class="hljs-comment">#三引号示例</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;Mike:Hi,How are you?</span><br><span class="hljs-string">LiMing:Fine,Thank you!and you?</span><br><span class="hljs-string">Mike:I’m fine,too!&#x27;&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>tips：</p><ol><li><p>使用双反斜杠（<code>\\</code>）来表示反斜杠本身，而 \n 表示换行</p></li><li><p>想要指示某些不需要使用转义符进行特别处理的字符串，那么需要指定一个原始字符串。原始字符串通过给字符串加上前缀 r 或 R：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s = <span class="hljs-string">r&quot;换行符是\n。&quot;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(s)</span><br>换行符是\n。<br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s = <span class="hljs-string">&#x27;it\&#x27;s me&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s</span><br>&quot;it&#x27;s me&quot;<br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s = <span class="hljs-string">&quot;换行符是\\n。&quot;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(s)</span><br>换行符是\n。<br></code></pre></td></tr></table></figure><p>详细可参考：<a href="https://blog.csdn.net/yawei_liu1688/article/details/108364192">https://blog.csdn.net/yawei_liu1688/article/details/108364192</a></p></li><li><p>字符串的截取（切片） ：<code>字符串常量[start_index:end_index+1]</code>(左闭右开)</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-number">1.</span>  <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;Lingyi&#x27;</span><br><span class="hljs-number">2.</span>  <span class="hljs-keyword">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>]) <span class="hljs-meta">#输出结果为L</span><br><span class="hljs-number">3.</span>  <span class="hljs-keyword">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]) <span class="hljs-meta">#输出结果为ing</span><br><span class="hljs-number">4.</span>  <span class="hljs-keyword">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">-1</span>]) <span class="hljs-meta">#输出结果为i</span><br></code></pre></td></tr></table></figure></li></ol><ul><li>[:] 这种形式 就是 从哪截取到哪里 如果是负数 就从后往前找</li><li>[::] 这种形式 第一个 ：代表处理后的字符串，第二个 ： 代表间隔截取，正数正向输出，负数代表逆向输出<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">str</span> = &#x27;<span class="hljs-number">0123456789</span>&#x27;<br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[0:3]：&quot;</span>+str[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])     # 正向截取字符串 <span class="hljs-number">0</span>~<span class="hljs-number">3</span>（不包含<span class="hljs-number">3</span>）,即 <span class="hljs-number">012</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[:]:&quot;</span>+str[:])          # 正向输出所有字符串,即<span class="hljs-number">0123456789</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[6:]：&quot;</span>+str[<span class="hljs-number">6</span>:])       # 正向输出字符,从 <span class="hljs-number">6</span> ~ 结束  即 <span class="hljs-number">6789</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[:-3]：&quot;</span>+str[:-<span class="hljs-number">3</span>])     # 正向输出,从开始 ~ 倒数第第<span class="hljs-number">3</span>个字符（不含第<span class="hljs-number">3</span>个）即 <span class="hljs-number">0123456</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[2]：&quot;</span>+str[<span class="hljs-number">2</span>])         #输出第<span class="hljs-number">3</span>个字符 即 <span class="hljs-number">2</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[:-1]：&quot;</span>+str[:-<span class="hljs-number">1</span>])     # 正向输出,从开始 ~ 倒数第第<span class="hljs-number">1</span>个字符（不含第<span class="hljs-number">1</span>个）即 <span class="hljs-number">012345678</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[-1]：&quot;</span>+str[-<span class="hljs-number">1</span>])       # 输出最后一个字符 即 <span class="hljs-number">9</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[-3:-1]:&quot;</span>+str[-<span class="hljs-number">3</span>:-<span class="hljs-number">1</span>])  #逆序输出,从倒数第 <span class="hljs-number">3</span> ~ 倒数第 <span class="hljs-number">1</span> （不含） 即 <span class="hljs-number">78</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[-3:]:&quot;</span>+str[-<span class="hljs-number">3</span>:])      # 逆序输出,从倒数第 <span class="hljs-number">3</span> ~ 最后 即 <span class="hljs-number">789</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[::-1]：&quot;</span>+str[::-<span class="hljs-number">1</span>])   # 逆序输出,连续输出所有字符串,即  <span class="hljs-number">9876543210</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[::-2]：&quot;</span>+str[::-<span class="hljs-number">2</span>])   # 逆序输出,从最后一个开始，每隔<span class="hljs-number">2</span>个字符串输出一个  <span class="hljs-number">97531</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[::1]：&quot;</span>+str[::<span class="hljs-number">1</span>])     # 正序输出,连续输出所有字符串,即 <span class="hljs-number">0123456789</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[::2]：&quot;</span>+str[::<span class="hljs-number">2</span>])     # 正序输出,从第一个开始，每隔<span class="hljs-number">2</span>个字符串输出一个即 <span class="hljs-number">02468</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[:-2:4]:&quot;</span>+str[:-<span class="hljs-number">2</span>:<span class="hljs-number">4</span>])  # 正序输出,从第一个开始，每隔<span class="hljs-number">4</span>个字符输出一个 即 <span class="hljs-number">04</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;str[1:-2:4]:&quot;</span>+str[<span class="hljs-number">1</span>:-<span class="hljs-number">2</span>:<span class="hljs-number">4</span>])# 正序输出,从第二个开始，每隔<span class="hljs-number">4</span>个字符输出一个 即 <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li>不同数据类型可以相互转换<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-number">1.</span>  <span class="hljs-built_in">num</span> = <span class="hljs-number">1</span><br><span class="hljs-number">2.</span>  string = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-number">3.</span>  num2 = <span class="hljs-built_in">int</span>(string)<br><span class="hljs-number">4.</span>  <span class="hljs-built_in">print</span>(<span class="hljs-built_in">num</span>+num2)<br></code></pre></td></tr></table></figure></li><li><code>+</code>用在字符串中间是连接符，用在数值中间是运算符<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">#运算符，结果为3</span><br><span class="hljs-bullet">1.</span>  a = 1<br><span class="hljs-bullet">2.</span>  b = 2<br><span class="hljs-bullet">3.</span>  c = a+b<br><span class="hljs-bullet">4.</span>  print(c)<br><br><span class="hljs-section">#连接符，结果为ab</span><br><span class="hljs-bullet">1.</span>  a = 1<br><span class="hljs-bullet">2.</span>  b = 2<br><span class="hljs-bullet">3.</span>  c = &#x27;a&#x27;+&#x27;b&#x27;<br><span class="hljs-bullet">4.</span>  print(c)<br></code></pre></td></tr></table></figure></li><li>字符串的驻留机制：<a href="https://zhuanlan.zhihu.com/p/35362912">https://zhuanlan.zhihu.com/p/35362912</a></li><li>字符串内建函数：实现了 string 模块的大部分方法。<br>详细参考：<a href="https://www.runoob.com/python/python-strings.html">https://www.runoob.com/python/python-strings.html</a></li></ol><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>列表是任意对象的有序集合，元素之间用逗号隔开。这里的任意对象，包括列表嵌套列表。</p><ol><li>列表删除操作：<ul><li><p><code>del 目标 或 del(目标)</code>\</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 删除列表</span><br>list1 = [<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>]<br><span class="hljs-comment"># 2种写法</span><br><span class="hljs-built_in">del</span> list1<br><span class="hljs-comment"># del(list1 )</span><br><br><span class="hljs-comment"># 删除指定数据</span><br>list2 = [<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>]<br><span class="hljs-built_in">del</span> list2[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure></li><li><p><code>pop()</code><br> 删除指定下标的数据，如果不指定下标，默认删除最后一个数据，无论是按照下标还是删除最后一个，pop函数都会返回这个被删除的数据</p></li><li><p><code>remove(数据)</code></p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">list1 = [<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>]<br>list1.<span class="hljs-built_in">remove</span>(<span class="hljs-string">&#x27;python&#x27;</span>)<br><span class="hljs-comment"># 也可以写成：list1.remove(list1[0]) </span><br></code></pre></td></tr></table></figure></li><li><p><code>clear(列表名) </code>：清空列表</p></li></ul></li><li>更新列表：使用<code>append()</code>添加列表项</li><li>列表脚本操作符:<br>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</li><li>常用列表函数：<br><a href="https://www.runoob.com/python/python-lists.html">https://www.runoob.com/python/python-lists.html</a></li></ol><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</p><p>元组使用小括号，列表使用方括号。</p><ol><li>删除元组：<code>del 元组名</code></li><li>对元组连接组合</li><li>元组运算符（进行组合和复制）</li><li>元组索引，截取</li><li>无关闭分隔符：任意无符号的对象，以逗号隔开，默认为元组</li><li>元组内置函数：<br><a href="https://www.runoob.com/python/python-tuples.html">https://www.runoob.com/python/python-tuples.html</a></li></ol><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>一种可变容器模型，且可存储任意类型对象。<br><code>dict</code> 作为 Python 的关键字和内置函数，字典的变量名不建议命名为 dict。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">d = &#123;key1 : <span class="hljs-type">value1</span>, key2 : <span class="hljs-type">value2</span> &#125;<br></code></pre></td></tr></table></figure><p>字典值可以没有限制地取任何 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。</p><ul><li>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。</li><li>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</li></ul><ol><li>访问字典的值<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/python</span><br> <br>tinydict = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Zara&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: 7, <span class="hljs-string">&#x27;Class&#x27;</span>: <span class="hljs-string">&#x27;First&#x27;</span>&#125;<br> <br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;tinydict[&#x27;Name&#x27;]: &quot;</span>, tinydict[<span class="hljs-string">&#x27;Name&#x27;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;tinydict[&#x27;Age&#x27;]: &quot;</span>, tinydict[<span class="hljs-string">&#x27;Age&#x27;</span>]<br></code></pre></td></tr></table></figure></li><li>修改字典<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">tinydict = &#123;&#x27;Name&#x27;: &#x27;Zara&#x27;, &#x27;Age&#x27;: <span class="hljs-number">7</span>, &#x27;Class&#x27;: &#x27;First&#x27;&#125;<br> <br>tinydict[&#x27;Age&#x27;] = <span class="hljs-number">8</span> <span class="hljs-meta"># 更新</span><br>tinydict[&#x27;School&#x27;] = <span class="hljs-string">&quot;RUNOOB&quot;</span> <span class="hljs-meta"># 添加</span><br></code></pre></td></tr></table></figure></li><li>删除字典元素<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">del</span> tinydict[<span class="hljs-string">&#x27;Name&#x27;</span>]  <span class="hljs-comment"># 删除键是&#x27;Name&#x27;的条目</span><br>tinydict.clear()      <span class="hljs-comment"># 清空字典所有条目</span><br><span class="hljs-built_in">del</span> tinydict          <span class="hljs-comment"># 删除字典</span><br></code></pre></td></tr></table></figure></li><li>字典内置函数&amp;方法<br><a href="https://www.runoob.com/python/python-dictionary.html">https://www.runoob.com/python/python-dictionary.html</a></li></ol><h3 id="7-日期与时间"><a href="#7-日期与时间" class="headerlink" title="7. 日期与时间"></a>7. 日期与时间</h3><p>Python 提供了一个 time 和 calendar 模块可以用于格式化日期和时间。</p><p>时间间隔是以秒为单位的浮点小数。每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示。</p><p><code>time.time()</code> 用于获取当前时间戳 </p><h4 id="struct-time元组"><a href="#struct-time元组" class="headerlink" title="struct_time元组"></a><code>struct_time</code>元组</h4><p>很多Python函数用一个元组装起来的9组数字处理时间:<br>html <div align="center"> <img src="https://img-blog.csdnimg.cn/f3c5757a142747c28166d8d1ede987e6.png " width = 80% /> </div></p><h4 id="获取当前时间："><a href="#获取当前时间：" class="headerlink" title="获取当前时间："></a>获取当前时间：</h4><p>从返回浮点数的时间戳方式向时间元组转换，只要将浮点数传递给如localtime之类的函数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> <span class="hljs-type">time</span><br> <br><span class="hljs-built_in">localtime</span> = <span class="hljs-type">time</span>.<span class="hljs-built_in">localtime</span>(<span class="hljs-type">time</span>.time())<br>print &quot;本地时间为 :&quot;, <span class="hljs-built_in">localtime</span><br></code></pre></td></tr></table></figure><p>实例输出结果为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">本地时间为 : time.struct_time(<span class="hljs-attribute">tm_year</span>=2016, <span class="hljs-attribute">tm_mon</span>=4, <span class="hljs-attribute">tm_mday</span>=7, <span class="hljs-attribute">tm_hour</span>=10, <span class="hljs-attribute">tm_min</span>=3, <span class="hljs-attribute">tm_sec</span>=27, <span class="hljs-attribute">tm_wday</span>=3, <span class="hljs-attribute">tm_yday</span>=98, <span class="hljs-attribute">tm_isdst</span>=0)<br></code></pre></td></tr></table></figure><h4 id="获取格式化的时间-asctime"><a href="#获取格式化的时间-asctime" class="headerlink" title="获取格式化的时间: asctime()"></a>获取格式化的时间: <code>asctime()</code></h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">localtime</span> = <span class="hljs-type">time</span>.asctime( <span class="hljs-type">time</span>.<span class="hljs-built_in">localtime</span>(<span class="hljs-type">time</span>.time()) )<br></code></pre></td></tr></table></figure><p>实例输出结果为：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">本地时间为 : <span class="hljs-type">Thu</span> Apr  <span class="hljs-number">7</span> <span class="hljs-number">10</span>:<span class="hljs-number">05</span>:<span class="hljs-number">21</span> <span class="hljs-number">2016</span><br></code></pre></td></tr></table></figure><h4 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h4><p>使用 time 模块的 <code>strftime</code> 来格式化日期 :<br><code>time.strftime(format[, t])</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs perl">import <span class="hljs-keyword">time</span><br> <br><span class="hljs-comment"># 格式化成2016-03-20 11:45:39形式</span><br><span class="hljs-keyword">print</span> time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()) <br> <br><span class="hljs-comment"># 格式化成Sat Mar 28 22:24:24 2016形式</span><br><span class="hljs-keyword">print</span> time.strftime(<span class="hljs-string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>, time.localtime()) <br>  <br><span class="hljs-comment"># 将格式字符串转换为时间戳</span><br>a = <span class="hljs-string">&quot;Sat Mar 28 22:24:24 2016&quot;</span><br><span class="hljs-keyword">print</span> time.mktime(time.strptime(a,<span class="hljs-string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>))<br></code></pre></td></tr></table></figure><p>日期格式化符号解释：<a href="https://www.runoob.com/python/python-date-time.html">https://www.runoob.com/python/python-date-time.html</a></p><h4 id="获取某月日历：引入calendar模块"><a href="#获取某月日历：引入calendar模块" class="headerlink" title="获取某月日历：引入calendar模块"></a>获取某月日历：引入<code>calendar</code>模块</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import calendar<br> <br>cal = calendar.month(2016, 1)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;以下输出2016年1月份的日历:&quot;</span><br><span class="hljs-built_in">print</span> cal<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">以下输出2016年1月份的日历:<br>    January 2016<br>Mo Tu We Th Fr Sa Su<br>            <span class="hljs-number"> 1 </span><span class="hljs-number"> 2 </span> 3<br><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 6 </span><span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span>10<br>11<span class="hljs-number"> 12 </span>13<span class="hljs-number"> 14 </span>15<span class="hljs-number"> 16 </span>17<br>18<span class="hljs-number"> 19 </span>20<span class="hljs-number"> 21 </span>22<span class="hljs-number"> 23 </span>24<br>25<span class="hljs-number"> 26 </span>27<span class="hljs-number"> 28 </span>29<span class="hljs-number"> 30 </span>31<br></code></pre></td></tr></table></figure><p>补充： python中关于时间和日期方面的模块有：<code>Time</code> 模块、<code>Calendar</code>模块、<code>datetime</code>模块、<code>pytz</code>模块、<code>dateutil</code>模块。<br>详细参考：<a href="https://www.runoob.com/python/python-date-time.html">https://www.runoob.com/python/python-date-time.html</a></p><h3 id="8-语句"><a href="#8-语句" class="headerlink" title="8. 语句"></a>8. 语句</h3><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><p>Python程序语言指定任何非0和非空（null）值为true，0 或者 null为false</p><ol><li>python 并不支持 switch 语句，所以多个条件判断，只能用 elif 来实现。<br>如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。<figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">if 判断条件1</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">执行语句1……</span><br><span class="hljs-attribute">elif 判断条件2</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">执行语句2……</span><br><span class="hljs-attribute">elif 判断条件3</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">执行语句3……</span><br><span class="hljs-attribute">else</span><span class="hljs-punctuation">:</span><br>    执行语句4……<br></code></pre></td></tr></table></figure></li><li>也可以在同一行的位置上使用if条件判断语句<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> = <span class="hljs-number">100</span> <br> <br><span class="hljs-keyword">if</span> ( <span class="hljs-built_in">var</span>  == <span class="hljs-number">100</span> ) : <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;变量 var 的值为100&quot;</span> <br></code></pre></td></tr></table></figure></li></ol><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><ol><li><p>基本语法：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># while循环</span><br><span class="hljs-keyword">while</span> 判断条件(condition)：<br>    执行语句(<span class="hljs-built_in">statements</span>)……<br><br><span class="hljs-meta"># for循环</span><br><span class="hljs-keyword">for</span> iterating_var in sequence:<br>   statements(s)<br></code></pre></td></tr></table></figure></li><li><p>continue 用于跳过该次循环，break 则是用于退出循环。<br>此外”判断条件”还可以是个常值，表示循环必定成立。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># continue 和 break 用法</span><br> <br><span class="hljs-attribute">i</span> = <span class="hljs-number">1</span><br><span class="hljs-attribute">while</span> i &lt; <span class="hljs-number">10</span>:   <br>    <span class="hljs-attribute">i</span> += <span class="hljs-number">1</span><br>    <span class="hljs-attribute">if</span> i%<span class="hljs-number">2</span> &gt; <span class="hljs-number">0</span>:     # 非双数时跳过输出<br>        <span class="hljs-attribute">continue</span><br>    <span class="hljs-attribute">print</span> i         # 输出双数<span class="hljs-number">2</span>、<span class="hljs-number">4</span>、<span class="hljs-number">6</span>、<span class="hljs-number">8</span>、<span class="hljs-number">10</span><br> <br><span class="hljs-attribute">i</span> = <span class="hljs-number">1</span><br><span class="hljs-attribute">while</span> <span class="hljs-number">1</span>:            # 循环条件为<span class="hljs-number">1</span>必定成立<br>    <span class="hljs-attribute">print</span> i         # 输出<span class="hljs-number">1</span>~<span class="hljs-number">10</span><br>    <span class="hljs-attribute">i</span> += <span class="hljs-number">1</span><br>    <span class="hljs-attribute">if</span> i &gt; <span class="hljs-number">10</span>:     # 当i大于<span class="hljs-number">10</span>时跳出循环<br>        <span class="hljs-attribute">break</span><br></code></pre></td></tr></table></figure></li><li><p>无限循环：如果条件判断语句永远为 true，循环将会无限的执行下去<br>可以使用 <code>CTRL+C</code>来中断无限循环。</p></li><li><p>循环使用 else 语句</p></li></ol><ul><li>while … else 在循环条件为 false 时执行 else 语句块 <figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">count</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">count</span> &lt; <span class="hljs-number">5</span>:<br>   <span class="hljs-keyword">print</span> <span class="hljs-keyword">count</span>, <span class="hljs-string">&quot; is  less than 5&quot;</span><br>   <span class="hljs-keyword">count</span> = <span class="hljs-keyword">count</span> + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-keyword">print</span> <span class="hljs-keyword">count</span>, <span class="hljs-string">&quot; is not less than 5&quot;</span><br></code></pre></td></tr></table></figure></li><li>for循环<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">for</span> <span class="hljs-built_in">num</span> <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>):  <span class="hljs-comment"># 迭代 10 到 20 之间的数字</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>,<span class="hljs-built_in">num</span>): <span class="hljs-comment"># 根据因子迭代</span><br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">num</span>%i == <span class="hljs-number">0</span>:      <span class="hljs-comment"># 确定第一个因子</span><br>         j=<span class="hljs-built_in">num</span>/i          <span class="hljs-comment"># 计算第二个因子</span><br>         print (<span class="hljs-string">&#x27;%d 等于 %d * %d&#x27;</span> % (<span class="hljs-built_in">num</span>,i,j))<br>         break            <span class="hljs-comment"># 跳出当前循环</span><br>   <span class="hljs-keyword">else</span>:                  <span class="hljs-comment"># 循环的 else 部分</span><br>      print (<span class="hljs-string">&#x27;%d 是一个质数&#x27;</span> % <span class="hljs-built_in">num</span>)<br></code></pre></td></tr></table></figure></li></ul><ol start="5"><li>简单语句组<br>如果while 循环体中只有一条语句，可以将该语句与while写在同一行中<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">flag = <span class="hljs-number">1</span><br> <br><span class="hljs-keyword">while</span> (flag): print <span class="hljs-symbol">&#x27;Given</span> flag <span class="hljs-keyword">is</span> really <span class="hljs-literal">true</span>!&#x27;<br></code></pre></td></tr></table></figure></li><li>通过序列索引迭代<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">fruits = [<span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>,  <span class="hljs-string">&#x27;mango&#x27;</span>]<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">index</span> in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fruits)):<br>   <span class="hljs-keyword">print</span> (<span class="hljs-string">&#x27;当前水果 : %s&#x27;</span> % fruits[<span class="hljs-built_in">index</span>])<br></code></pre></td></tr></table></figure></li></ol><h4 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h4><p> pass 是空语句，是为了保持程序结构的完整性，用做占位语句。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 输出 Python 的每个字母</span><br><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;Python&#x27;</span>:<br>   <span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;h&#x27;</span>:<br>      pass<br>      <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;这是 pass 块&#x27;</span><br>   <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;当前字母 :&#x27;</span>, letter<br></code></pre></td></tr></table></figure><h3 id="9-运算符"><a href="#9-运算符" class="headerlink" title="9. 运算符"></a>9. 运算符</h3><h4 id="算术运算符（略）"><a href="#算术运算符（略）" class="headerlink" title="算术运算符（略）"></a>算术运算符（略）</h4><h4 id="比较运算符（略）"><a href="#比较运算符（略）" class="headerlink" title="比较运算符（略）"></a>比较运算符（略）</h4><h4 id="赋值运算符（略）"><a href="#赋值运算符（略）" class="headerlink" title="赋值运算符（略）"></a>赋值运算符（略）</h4><p>参考：<a href="https://www.runoob.com/python/python-operators.html">https://www.runoob.com/python/python-operators.html</a></p><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>按位运算符是把数字看作二进制来进行计算的</p><table><thead><tr><th>运算符</th><th>解释</th><th>作用</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符</td><td>参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td></tr><tr><td>I</td><td>按位或运算符</td><td>只要对应的二个二进位有一个为1时，结果位就为1</td></tr><tr><td>^</td><td>按位异或运算符</td><td>当两对应的二进位相异时，结果为1</td></tr><tr><td>~</td><td>按位取反运算符</td><td>对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1</td></tr><tr><td>&lt;&lt;</td><td>左移动运算符</td><td>运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数字指定了移动的位数，高位丢弃，低位补0。</td></tr><tr><td>&gt;&gt;</td><td>右移动运算符</td><td>把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数字指定了移动的位数</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li>and</li><li>or</li><li>not</li></ul><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><ul><li>in</li><li>not in<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">a = 10<br>list = [1, 2, 3, 4, 5 ];<br> <br><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">in</span> list ):<br>   <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;变量 a 在给定的列表中 list 中&quot;</span><br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;变量 a 不在给定的列表中 list 中&quot;</span><br> <br><span class="hljs-comment"># 修改变量 a 的值</span><br>a = 2<br><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">in</span> list ):<br>   <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;变量 a 在给定的列表中 list 中&quot;</span><br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;变量 a 不在给定的列表中 list 中&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><p>用于比较两个对象的存储单元(本质是判断指针)</p><ul><li>is</li><li>is not</li></ul><p>tips：<code>is 与 == 区别</code> :</p><p>is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， &#x3D;&#x3D; 用于判断引用变量的值是否相等。</p><h3 id="10-函数"><a href="#10-函数" class="headerlink" title="10. 函数"></a>10. 函数</h3><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>语法：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">functionname</span>(<span class="hljs-params"> parameters </span>):<br>   <span class="hljs-string">&quot;函数_文档字符串&quot;</span><br>   function_suite<br>   <span class="hljs-keyword">return</span> [expression]<br></code></pre></td></tr></table></figure><ul><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ul><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>在 python 中，类型属于对象，变量是没有类型的：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-attr">a</span>=<span class="hljs-string">&quot;Runoob&quot;</span><br></code></pre></td></tr></table></figure><p>以上代码中，[1,2,3] 是 List 类型，”Runoob” 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是 List 类型对象，也可以指向 String 类型对象。</p><ul><li><p>可更改(mutable)与不可更改(immutable)对象:<br>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p><ul><li><p>不可变类型：变量赋值 a&#x3D;5 后再赋值 a&#x3D;10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。</p></li><li><p>可变类型：变量赋值 la&#x3D;[1,2,3,4] 后再赋值 la[2]&#x3D;5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</p></li></ul></li><li><p>python 函数的参数传递：</p><ul><li><p>不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</p></li><li><p>可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</p></li></ul></li><li><p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p></li><li><p>调用函数时，默认参数的值如果没有传入，则被认为是默认值<br>参数默认值在函数声明时设置</p></li></ul><h4 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h4><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">def functionname([<span class="hljs-keyword">formal</span><span class="hljs-number">_</span>args,] *var<span class="hljs-number">_</span>args<span class="hljs-number">_</span>tuple ):<br>   <span class="hljs-string">&quot;函数_文档字符串&quot;</span><br>   <span class="hljs-keyword">function</span><span class="hljs-number">_</span>suite<br>   <span class="hljs-keyword">return</span> [expression]<br></code></pre></td></tr></table></figure><p>加了星号（*）的变量名会存放所有未命名的变量参数<br>示例：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs axapta">def printinfo( arg1, *vartuple ):<br>   <span class="hljs-string">&quot;打印任何传入的参数&quot;</span><br>   <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;输出: &quot;</span><br>   <span class="hljs-keyword">print</span> arg1<br>   <span class="hljs-keyword">for</span> <span class="hljs-built_in">var</span> <span class="hljs-keyword">in</span> vartuple: <span class="hljs-meta">#哇哦，这里的for in体现出不定长的特性！！</span><br>      <span class="hljs-keyword">print</span> <span class="hljs-built_in">var</span><br>   <span class="hljs-keyword">return</span><br> <br><span class="hljs-meta"># 调用printinfo 函数</span><br>printinfo( <span class="hljs-number">10</span> )<br>printinfo( <span class="hljs-number">70</span>, <span class="hljs-number">60</span>, <span class="hljs-number">50</span> )<br></code></pre></td></tr></table></figure><h4 id="匿名参数"><a href="#匿名参数" class="headerlink" title="匿名参数"></a>匿名参数</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-built_in">lambda</span> [arg1 [,arg2,.....argn]]<span class="hljs-symbol">:expression</span><br></code></pre></td></tr></table></figure><ul><li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li><li>lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。</li><li>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。<br>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 可写函数说明</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-keyword">lambda</span> arg1, arg2: arg1 + arg2<br> <br><span class="hljs-comment"># 调用sum函数</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;相加后的值为 : &quot;</span>, <span class="hljs-built_in">sum</span>( <span class="hljs-number">10</span>, <span class="hljs-number">20</span> )<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;相加后的值为 : &quot;</span>, <span class="hljs-built_in">sum</span>( <span class="hljs-number">20</span>, <span class="hljs-number">20</span> )<br></code></pre></td></tr></table></figure>运行结果：<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">相加后的值为 :  30<br>相加后的值为 :  40<br></code></pre></td></tr></table></figure></li></ul><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><ul><li>全局变量</li><li>局部变量</li></ul><h2 id="进阶部分"><a href="#进阶部分" class="headerlink" title="进阶部分"></a>进阶部分</h2><h3 id="1-模块"><a href="#1-模块" class="headerlink" title="1. 模块"></a>1. 模块</h3><p>Python 模块(Module)，是一个 Python 文件，以<code> .py</code> 结尾，包含了 Python 对象定义和Python语句。</p><p>模块能够有逻辑地组织Python 代码段。把相关的代码分配到一个模块里能让代码更好用，更易懂。</p><p>模块能定义函数，类和变量，模块里也能包含可执行的代码。</p><h4 id="模块的引入"><a href="#模块的引入" class="headerlink" title="模块的引入"></a>模块的引入</h4><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-keyword">import</span> <span class="hljs-keyword">module</span><span class="hljs-number">1</span>[, <span class="hljs-keyword">module</span><span class="hljs-number">2</span>[,... moduleN]]<br></code></pre></td></tr></table></figure><p>一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。</p><h4 id="搜索路径和环境变量"><a href="#搜索路径和环境变量" class="headerlink" title="搜索路径和环境变量"></a>搜索路径和环境变量</h4><p><a href="https://www.runoob.com/python/python-modules.html">https://www.runoob.com/python/python-modules.html</a></p><h4 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h4><p>命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。</p><p>一个 Python 表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。如果要给函数内的全局变量赋值，必须使用 global 语句：<br><code>global VarName</code></p><h4 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir()函数"></a>dir()函数</h4><p>排好序的字符串列表，内容是一个模块里定义过的名字。<br>返回的列表容纳了在一个模块里定义的所有模块，变量和函数。</p><h4 id="globals-和-locals-函数、reload-函数"><a href="#globals-和-locals-函数、reload-函数" class="headerlink" title="globals() 和 locals() 函数、reload() 函数"></a>globals() 和 locals() 函数、reload() 函数</h4><p><a href="https://www.runoob.com/python/python-modules.html">https://www.runoob.com/python/python-modules.html</a></p><h4 id="Python中的包"><a href="#Python中的包" class="headerlink" title="Python中的包"></a>Python中的包</h4><p>包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。</p><p>简单来说，包就是文件夹，但该文件夹下必须存在 <strong>init</strong>.py 文件, 该文件的内容可以为空。<strong>init</strong>.py 用于标识当前文件夹是一个包。</p><h3 id="2-File-文件-方法"><a href="#2-File-文件-方法" class="headerlink" title="2.  File(文件) 方法"></a>2.  File(文件) 方法</h3><h4 id="读取键盘输入"><a href="#读取键盘输入" class="headerlink" title="读取键盘输入"></a>读取键盘输入</h4><ul><li>raw_input函数<br>raw_input([prompt]) 函数从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）</li><li>input函数<br>input([prompt]) 函数和 raw_input([prompt]) 函数基本类似，但是 input 可以接收一个Python表达式作为输入，并将运算结果返回<figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-keyword">str</span> = <span class="hljs-keyword">input</span>(<span class="hljs-string">&quot;请输入：&quot;</span>)<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;你输入的内容是: &quot;</span>, <span class="hljs-keyword">str</span><br></code></pre></td></tr></table></figure>示例：<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">请输入：<span class="hljs-comment">[x*5 for x in range(2,10,2)]</span><br>你输入的内容是:  <span class="hljs-comment">[10, 20, 30, 40]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="打开、关闭和读写文件"><a href="#打开、关闭和读写文件" class="headerlink" title="打开、关闭和读写文件"></a>打开、关闭和读写文件</h4><ul><li><p>open函数 ：打开一个文件，创建一个file对象<br><code>file object = open(file_name ,[access_mode],[buffering])</code></p><ul><li>file_name：file_name变量是一个包含了你要访问的文件名称的字符串值</li><li>access_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)</li><li>buffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认</li></ul></li><li><p>File对象的属性</p></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>file.closed</td><td>返回true如果文件已被关闭，否则返回false</td></tr><tr><td>file.mode</td><td>返回被打开文件的访问模式</td></tr><tr><td>file.name</td><td>返回文件的名称</td></tr><tr><td>file.softspace</td><td>如果用print输出后，必须跟一个空格符，则返回false；否则返回true</td></tr></tbody></table><ul><li><p>close（）函数<br><code>fileObject.close()</code> :<br>刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入</p></li><li><p>write()函数<br><code>fileObject.write(string)</code> :将字符串写入一个打开的文件</p><ul><li>Python字符串可以是二进制数据，而不是仅仅是文字。</li><li>write()方法不会在字符串的结尾添加换行符(‘\n’)。</li></ul></li><li><p>read()函数<br><code>fileObject.read([count])</code> :从一个打开的文件中读取一个字符串</p><ul><li>被传递的参数是要从已打开文件中读取的字节计数</li><li>从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是直到文件的末尾<br>示例：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 打开一个文件<br><span class="hljs-keyword">fo</span> = <span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;foo.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-keyword">fo</span>.<span class="hljs-keyword">write</span>( <span class="hljs-string">&quot;www.runoob.com!\nVery good site!\n&quot;</span>)<br>str = <span class="hljs-keyword">fo</span>.<span class="hljs-keyword">read</span>(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;读取的字符串是 : &quot;</span>, str<br># 关闭打开的文件<br><span class="hljs-keyword">fo</span>.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure>运行结果 ：<code>读取的字符串是 :  www.runoob</code></li></ul></li></ul><h4 id="文件定位"><a href="#文件定位" class="headerlink" title="文件定位"></a>文件定位</h4><ul><li><code>tell()</code> :返回文件内的当前位置，下一次的读写会发生在文件开头这么多字节之后</li><li><code>seek（offset,[from]）</code> :改变当前文件的位置<ul><li>offset变量表示要移动的字节数</li><li>from变量指定开始移动字节的参考位置</li><li>如果from设为0，将文件的开头作为移动字节的参考位置。<br>  如果设为1，则使用当前的位置作为参考位置。<br>  如果设为2，那么该文件的末尾将作为参考位置。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br> <br><span class="hljs-comment"># 打开一个文件</span><br>fo = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;foo.txt&quot;</span>, <span class="hljs-string">&quot;r+&quot;</span>)<br><span class="hljs-built_in">str</span> = fo.read(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;读取的字符串是 : &quot;</span>, <span class="hljs-built_in">str</span><br> <br><span class="hljs-comment"># 查找当前位置</span><br>position = fo.tell()<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;当前文件位置 : &quot;</span>, position<br> <br><span class="hljs-comment"># 把指针再次重新定位到文件开头</span><br>position = fo.seek(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">str</span> = fo.read(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;重新读取字符串 : &quot;</span>, <span class="hljs-built_in">str</span><br><span class="hljs-comment"># 关闭打开的文件</span><br>fo.close()<br></code></pre></td></tr></table></figure>运行结果：<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">读取的字符串是 :  <span class="hljs-type">www.runoob</span><br>当前文件位置 :  10<br>重新读取字符串 :  <span class="hljs-type">www.runoob</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="重命名和删除文件"><a href="#重命名和删除文件" class="headerlink" title="重命名和删除文件"></a>重命名和删除文件</h4><p>Python的<code>os</code>模块提供了执行文件处理操作的方法，比如重命名和删除文件。</p><p>要使用这个模块，必须先 <code>import os</code>。</p><ul><li>os.rename(current_file_name, new_file_name)<br>重命名文件</li><li>os.remove(file_name)<br>删除文件</li></ul><h4 id="Python里的目录"><a href="#Python里的目录" class="headerlink" title="Python里的目录"></a>Python里的目录</h4><ul><li>os.mkdir(“newdir”)<br>在当前目录下创建新的目录</li><li>os.chdir(“newdir”)<br>改变当前的目录<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">import</span> <span class="hljs-built_in">os</span><br> <br># 将当前目录改为<span class="hljs-string">&quot;/home/newdir&quot;</span><br><span class="hljs-built_in">os</span>.chdir(<span class="hljs-string">&quot;/home/newdir&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>os.getcwd()<br>显示当前的工作目录</li><li>os.rmdir(‘dirname’)<br>删除目录，目录名称以参数传递，目录的完全合规的名称必须被给出，否则会在当前目录下搜索该目录。<br>更多参考：<a href="https://www.runoob.com/python/file-methods.html">https://www.runoob.com/python/file-methods.html</a></li></ul><h3 id="3-内置函数"><a href="#3-内置函数" class="headerlink" title="3. 内置函数"></a>3. 内置函数</h3><p><a href="https://www.runoob.com/python/python-built-in-functions.html">https://www.runoob.com/python/python-built-in-functions.html</a></p><h3 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4. 异常处理"></a>4. 异常处理</h3><h3 id="5-面向对象"><a href="#5-面向对象" class="headerlink" title="5. 面向对象"></a>5. 面向对象</h3><h3 id="6-多线程"><a href="#6-多线程" class="headerlink" title="6. 多线程"></a>6. 多线程</h3><h3 id="7-SMTP发送邮件"><a href="#7-SMTP发送邮件" class="headerlink" title="7. SMTP发送邮件"></a>7. SMTP发送邮件</h3><h3 id="8-网络编程"><a href="#8-网络编程" class="headerlink" title="8. 网络编程"></a>8. 网络编程</h3><h3 id="9-使用python进行GUI设计"><a href="#9-使用python进行GUI设计" class="headerlink" title="9. 使用python进行GUI设计"></a>9. 使用python进行GUI设计</h3><h3 id="10-使用-Python-语言来编码和解码-JSON-对象"><a href="#10-使用-Python-语言来编码和解码-JSON-对象" class="headerlink" title="10. 使用 Python 语言来编码和解码 JSON 对象"></a>10. 使用 Python 语言来编码和解码 JSON 对象</h3><h3 id="11-使用python进行AI绘画"><a href="#11-使用python进行AI绘画" class="headerlink" title="11.使用python进行AI绘画"></a>11.使用python进行AI绘画</h3>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>my technology stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 学习指南</title>
    <link href="/2023/07/26/Git-%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <url>/2023/07/26/Git-%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>常用的Git命令整理</p><span id="more"></span> <h3 id="拷贝仓库"><a href="#拷贝仓库" class="headerlink" title="拷贝仓库"></a>拷贝仓库</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;url</span>&gt; [directory]<br></code></pre></td></tr></table></figure><p>url为git仓库地址，directory为本地目录</p><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ul><li>git branch：列出你在本地的分支</li><li>git branch  branchname：创建分支</li><li>git merge branchname：将任意分支合并到到当前分支中，branchname为需要合并的分支</li><li>git branch -d (branchname)：删除分支</li><li>git log –-oneline：查看简洁的历史记录</li><li>git log –graph ：查看历史中什么时候出现了分支、合并</li><li>git checkout:<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git checkout .              <span class="hljs-comment">#放弃工作区中全部的修改</span><br>git checkout -- filename    <span class="hljs-comment">#放弃工作区中某个文件的修改</span><br><br>git checkout <span class="hljs-keyword">branchname </span>    <span class="hljs-comment">#切换分支</span><br>git checkout -<span class="hljs-keyword">b </span>(<span class="hljs-keyword">branchname)#创建新分支并立即切换到该分支下</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><ul><li>git remote：查看当前的远程仓库</li><li>git pull：提取远程仓仓库</li><li>git push：推送到远程仓库</li></ul><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-built_in">--hard</span> <span class="hljs-string">head</span>       <span class="hljs-comment">#当前版本</span><br><span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-built_in">--hard</span> <span class="hljs-string">HEAD</span>^      <span class="hljs-comment">#回退到上一个版本</span><br><span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-built_in">--hard</span> <span class="hljs-string">HEAD</span>^^     <span class="hljs-comment">#回退到上上一个版本</span><br><span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-built_in">--hard</span> <span class="hljs-string">HEAD</span>~<span class="hljs-string">3</span>     <span class="hljs-comment">#回退到往上3个版本</span><br><span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-built_in">--hard</span> <span class="hljs-string">HEAD</span>~<span class="hljs-string">10</span>    <span class="hljs-comment">#回退到往上10个版本</span><br></code></pre></td></tr></table></figure><h3 id="其它常用命令"><a href="#其它常用命令" class="headerlink" title="其它常用命令"></a>其它常用命令</h3><ul><li>git config：配置用户名和邮箱地址<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&#x27;你的用户名&#x27;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&#x27;你的邮箱&#x27;</span><br></code></pre></td></tr></table></figure></li><li>git status -s：查看相关文件的状态<ul><li>M - 被修改</li><li>A - 被添加</li><li>D - 被删除</li><li>R - 重命名</li><li>?? - 未被跟踪</li></ul></li><li>git add：将文件添加到缓存<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git <span class="hljs-built_in">add</span> .       <span class="hljs-comment">#添加所有文件到缓存</span><br><span class="hljs-keyword">it</span> <span class="hljs-built_in">add</span> *.java   <span class="hljs-comment">#添加某一类文件到缓存</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="使用好GitHub桌面和网页端"><a href="#使用好GitHub桌面和网页端" class="headerlink" title="使用好GitHub桌面和网页端"></a>使用好GitHub桌面和网页端</h3><p>相对复杂的：合并冲突，远程新建&#x2F;删除仓库等操作可以在桌面和网页版完成，更清楚简单。</p><p>更多可以参考：<br><a href="https://blog.csdn.net/qtiao/article/details/97783243">https://blog.csdn.net/qtiao/article/details/97783243</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>some tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openCV学习指南</title>
    <link href="/2023/07/26/openCV%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <url>/2023/07/26/openCV%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>一些opencv的函数积累，还有传统opencv处理项目的流程整理</p><span id="more"></span> <h3 id="pnp解算"><a href="#pnp解算" class="headerlink" title="pnp解算"></a>pnp解算</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">bool solvePnP(InputArray objectPoints, InputArray imagePoints, <br>               InputArray cameraMatrix, InputArray distCoeffs, <br>               OutputArray rvec, OutputArray tvec, bool <span class="hljs-attribute">useExtrinsicGuess</span>=<span class="hljs-literal">false</span>, <br>               int <span class="hljs-attribute">flags</span>=ITERATIVE )<br></code></pre></td></tr></table></figure><p>函数solvepnp接收一组对应的3D坐标和2D坐标，计算得到两组坐标对应的几何变换（旋转矩阵rvec，平移矩阵tvec）,从而建立相机拍摄2D图像中物体坐标和3D世界坐标系中物体坐标的映射关系。</p><h3 id="重映射"><a href="#重映射" class="headerlink" title="重映射"></a>重映射</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">void projectPoints(InputArray objectPoints, InputArray rvec, InputArray tvec,<br>                   InputArray cameraMatrix, InputArray distCoeffs, <br>                   OutputArray imagePoints, OutputArray <span class="hljs-attribute">jacobian</span>=noArray(), <br>                   double <span class="hljs-attribute">aspectRatio</span>=0 )                  <br></code></pre></td></tr></table></figure><p>根据所给的3D坐标和已知的几何变换来求解投影后的2D坐标</p><h3 id="同时标定两个摄像头"><a href="#同时标定两个摄像头" class="headerlink" title="同时标定两个摄像头"></a>同时标定两个摄像头</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby">double stereoCalibrate(<span class="hljs-title class_">InputArrayOfArrays</span> objectPoints, <span class="hljs-title class_">InputArrayOfArrays</span> imagePoints1,<br>　　　　　　　　　　　　　<span class="hljs-title class_">InputArrayOfArrays</span> imagePoints2, <br>                       <span class="hljs-title class_">InputOutputArray</span> cameraMatrix1,<span class="hljs-title class_">InputOutputArray</span> distCoeffs1, <br>                       <span class="hljs-title class_">InputOutputArray</span> cameraMatrix2, <span class="hljs-title class_">InputOutputArray</span> distCoeffs2, <br>                       <span class="hljs-title class_">Size</span> imageSize,<span class="hljs-title class_">OutputArray</span> R,<span class="hljs-title class_">OutputArray</span> T, <span class="hljs-title class_">OutputArray</span> E, <br>                       <span class="hljs-title class_">OutputArray</span> F,<br>                       <span class="hljs-title class_">TermCriteria</span>  criteria=<span class="hljs-title class_">TermCriteria</span>(<span class="hljs-title class_">TermCriteria</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:COUNT+TermCriteria</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:EPS</span>, <span class="hljs-number">30</span>, <span class="hljs-number">1e-6</span>),<br>                       int flags=<span class="hljs-variable constant_">CALIB_FIX_INTRINSIC</span> )<br></code></pre></td></tr></table></figure><p>能够求出两个摄像头的内外参数矩阵，还能够得出两个摄像头的位置关系R,T</p><h3 id="立体矫正"><a href="#立体矫正" class="headerlink" title="立体矫正"></a>立体矫正</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">void stereoRectify(InputArray cameraMatrix1, InputArray distCoeffs1, <br>                   InputArray cameraMatrix2, InputArray distCoeffs2, Size imageSize, <br>                   InputArray R, InputArray T,OutputArray R1, OutputArray R2, <br>                   OutputArray P1, OutputArray P2,OutputArray Q, <br>                   int <span class="hljs-attribute">flags</span>=CALIB_ZERO_DISPARITY, double <span class="hljs-attribute">alpha</span>=-1,<br>                   Size <span class="hljs-attribute">newImageSize</span>=Size(), Rect* <span class="hljs-attribute">validPixROI1</span>=0, <br>                   Rect* <span class="hljs-attribute">validPixROI2</span>=0 )<br></code></pre></td></tr></table></figure><p>计算每个摄像机(实际上)的旋转矩阵，从而使两个摄像机图像平面成为同一平面。因此，这使得所有的外极线平行，从而简化了稠密立体对应问题。</p>]]></content>
    
    
    <categories>
      
      <category>计算机视觉</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMakeLists 学习指南</title>
    <link href="/2023/07/25/CMakeLists-%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <url>/2023/07/25/CMakeLists-%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>CMake是一个元（meta）构建系统，可用于为许多其他构建工具创建构建文件。<br>三天速通！结合UGAS的CMakeLists食用更香捏！</p><span id="more"></span> <h4 id="上交教程："><a href="#上交教程：" class="headerlink" title="上交教程："></a>上交教程：</h4><p><a href="https://sjtu-robomaster-team.github.io/vision-learning-4-cmake-introduction/">https://sjtu-robomaster-team.github.io/vision-learning-4-cmake-introduction/</a></p><h4 id="完整教程："><a href="#完整教程：" class="headerlink" title="完整教程："></a>完整教程：</h4><p><a href="https://zhuanlan.zhihu.com/p/367808125">https://zhuanlan.zhihu.com/p/367808125</a></p><h4 id="核心语法："><a href="#核心语法：" class="headerlink" title="核心语法："></a>核心语法：</h4><p><a href="https://zhuanlan.zhihu.com/p/368701263">https://zhuanlan.zhihu.com/p/368701263</a></p><h3 id="速览：处理多源文件目录的方法"><a href="#速览：处理多源文件目录的方法" class="headerlink" title="速览：处理多源文件目录的方法"></a>速览：<code>处理多源文件目录的方法</code></h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-keyword">project</span> (hello_headers)<br><span class="hljs-comment">#设置了项目的名字为 hello_headers</span><br><br><span class="hljs-keyword">set</span>(SOURCES<br>    src/Hello.cpp<br>    src/main.cpp<br>)<br><span class="hljs-comment">#set 指令创建了一个变量，第一个参数为变量名 `SOURCES`，后面的参数就是这个变量所指代的内容</span><br><br><span class="hljs-keyword">add_executable</span>(hello_headers <span class="hljs-variable">$&#123;SOURCES&#125;</span>)<br><span class="hljs-comment"># $&#123;SOURCES&#125; 使用前面创建的变量来代替要进行编译的文件。</span><br><span class="hljs-comment"># hello_headers 指明了生成可执行文件需要的资源文件</span><br><span class="hljs-comment">#PRIVATE 关键字。</span><br><br><span class="hljs-keyword">target_include_directories</span>(hello_headers<br>    PRIVATE <br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span><br>)<br><span class="hljs-comment">#添加编译需要用到的头文件,hello_headers指明了需要的头文件的目录</span><br><span class="hljs-comment">#$&#123;PROJECT_SOURCE_DIR&#125;指明include文件所在的文件夹路径。(include文件夹所在的目录。)</span><br></code></pre></td></tr></table></figure><ul><li>关键字有三种，PRIVATE | PUBLIC | INTERFACE，不同的关键字在进行CMake编译后会生成不同的include 文件夹</li><li>在CMake中，变量的使用都是 ${变量名} 这种格式。</li><li>除了README.md文件是用来讲解的文件外，另外几个文件都是要进行编译的。</li><li>${PROJECT_SOURCE_DIR}指当前项目的顶级(上级)源目录,则在编写程序时引用include里面的头文件可以直接写头文件名，不用写相对路径了</li><li>${CMAKE_CXX_FLAGS} C++编译器的编译选项。具体常用选项有：<ul><li><code>-rdynamic</code> 通知链接器将所有符号添加到动态符号表，通过使用 dlopen 来实现向后跟踪</li><li><code>-O3</code> 开启优化</li><li><code>-fPIC</code> 编译器产生与位置无关代码，即产生的代码中全部使用相对地址</li><li><code>-ggdb</code> 编译器生成gdb专用的更为丰富的调试信息</li><li><code>-std=c++11</code></li><li><code>-Wall</code> 编译后显示所有警告<br>  （还有一些不太常用的，网址自查：<a href="https://blog.csdn.net/m0_51551385/article/details/125083575?ydreferer=aHR0cHM6Ly9jbi5iaW5nLmNvbS8=%EF%BC%89">https://blog.csdn.net/m0_51551385/article/details/125083575?ydreferer=aHR0cHM6Ly9jbi5iaW5nLmNvbS8%3D）</a></li></ul></li></ul><p><code>编译指令：</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">mkdir</span> build<br><br><span class="hljs-keyword">cd</span> build<br><br>cmake ..<br><br><span class="hljs-keyword">make</span><br></code></pre></td></tr></table></figure><p>编译完成后，在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./hello_headers<br></code></pre></td></tr></table></figure><p>就可以运行程序文件。</p><h3 id="高级点的语法："><a href="#高级点的语法：" class="headerlink" title="高级点的语法："></a>高级点的语法：</h3><h4 id="递归搜索所有的-cpp文件并将列表存储在一个变量中"><a href="#递归搜索所有的-cpp文件并将列表存储在一个变量中" class="headerlink" title="递归搜索所有的.cpp文件并将列表存储在一个变量中:"></a>递归搜索所有的.cpp文件并将列表存储在一个变量中:</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">file(GLOB_RECURSE UGAS_SOURCE CONFIGURE_DEPENDS<br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span><span class="hljs-regexp">/src/</span>*.cpp<br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span><span class="hljs-regexp">/src/</span>*.cc)<br></code></pre></td></tr></table></figure><ul><li><code>CONFIGURE_DEPENDS</code><br>告知 CMake 有关配置过程的其他输入文件的信息。如果修改了任何命名文件，生成系统将重新运行 CMake 以重新配置文件并再次生成生成系统。<br>将文件指定为以分号分隔的路径列表。</li><li><code>configure_file</code>：通过读取输入文件中的内容，将 CMakeLists.txt 文件中的变量转变为 C&#x2F;C++ 中可识别的宏定义，然后存入输出文件中。<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">configure<span class="hljs-constructor">_file(&lt;<span class="hljs-params">input</span>&gt; &lt;<span class="hljs-params">output</span>&gt;)</span><br></code></pre></td></tr></table></figure>具体参考：<a href="https://zhuanlan.zhihu.com/p/436923370">https://zhuanlan.zhihu.com/p/436923370</a></li></ul><p>输入文件为 xxx（目录路径）-config.h.in<br>输出文件为 xxx-config.h</p><h4 id="选项开关："><a href="#选项开关：" class="headerlink" title="选项开关："></a>选项开关：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">option</span><span class="hljs-params">(&lt;OPTION_NAME&gt; <span class="hljs-string">&quot;&lt;help_text&gt;&quot;</span> [value])</span></span><br></code></pre></td></tr></table></figure><p>第一个参数为选项名称。此选项不仅可以是boolean，也可以是string或list。</p><p>第二个参数为选项介绍，为string。</p><p>第三个参数为选项默认值，依据选项类型设置。</p><ul><li>条件分支：<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">if</span> (CONDITION_1)<br>    <span class="hljs-meta"># do something</span><br><span class="hljs-keyword">elseif</span> (CONDITION_2)<br>    <span class="hljs-meta"># do something</span><br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-meta"># do something</span><br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure></li></ul><h4 id="find-package"><a href="#find-package" class="headerlink" title="find_package"></a><code>find_package</code></h4><p>查找并载入一个外部包</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">find_package(&lt;PackageName&gt; <span class="hljs-comment">[version]</span> <span class="hljs-comment">[EXACT]</span> <span class="hljs-comment">[QUIET]</span> <span class="hljs-comment">[MODULE]</span><br>             <span class="hljs-comment">[REQUIRED]</span> <span class="hljs-comment">[<span class="hljs-comment">[COMPONENTS]</span> <span class="hljs-comment">[components...]</span>]</span><br>             <span class="hljs-comment">[OPTIONAL_COMPONENTS components...]</span><br>             <span class="hljs-comment">[NO_POLICY_SCOPE]</span>)<br></code></pre></td></tr></table></figure><p>最常用用法:<br>find_package(OpenCV 4.7 REQUIRED) <br>find_package(HikCameraSDK REQUIRED)<br>查找名为 XX 的包，找不到就报错（并终止 cmake 进程，不再继续往下执行）。</p><ul><li>include_directories<br>cmake使用 include_directories是用来 提供搜索头文件路径</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">include_directories (<span class="hljs-selector-attr">[AFTER|BEFORE]</span> <span class="hljs-selector-attr">[SYSTEM]</span> dir1 <span class="hljs-selector-attr">[dir2 ...]</span>)<br></code></pre></td></tr></table></figure><h4 id="在ROS2环境下编译："><a href="#在ROS2环境下编译：" class="headerlink" title="在ROS2环境下编译："></a>在ROS2环境下编译：</h4><ul><li>生成目标文件，并且不需要再使用target_link_libraries  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ament_auto_add_executable</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">ament_auto_add_library</span><br></code></pre></td></tr></table></figure></li><li><code>ament_auto_find_build_dependencies</code><br>  ROS2环境下的链接库方式，相当于不用写find_package了。（ROS之前连接库的指令）</li><li><code>ament_auto_package</code><br>  这个用来代替以前的export（导出库）和两次install（安装库），以及最后的ament_package</li></ul><ul><li><code>link_directories</code><br>链接库；添加需要链接的库文件路径之后就可以使用相对路径，使用TARGET_LINK_LIBRARIES时，只需给出动态链接库名即可。</li><li><code>target_link_libraries </code><ul><li>如果所有目标都使用相关的include目录，则需要使用link_libraries;<br>如果路径是特定于目标，就用target_link_libraries </li><li>如果所有目标都使用相关的include目录，则需要使用link_libraries；<br>如果路径是特定于目标，就用target_link_libraries</li></ul></li></ul><ol start="6"><li><code>DEBUG</code>时使用的命令：</li></ol><ul><li><p>打印变量信息</p><ul><li>SET(USER_KEY, “Hello World”)\</li></ul></li></ul><p>#设置变量</p><ul><li>MESSAGE( STATUS “this var key &#x3D; ${USER_KEY}.”)</li><li>message([<mode>] “message text” …)</li></ul><p>UGAS的CMakeLists.txt参考：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.12</span>)<br><span class="hljs-keyword">project</span>(ugas VERSION <span class="hljs-number">1.0</span> LANGUAGES C CXX)<br><br><span class="hljs-comment"># Set compilation flags</span><br><span class="hljs-keyword">set</span>(CMAKE_BUILD_TYPE Release)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_C_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -O3&quot;</span>)<br><br><span class="hljs-keyword">if</span>(CMAKE_COMPILER_IS_GNUCXX <span class="hljs-keyword">OR</span> CMAKE_CXX_COMPILER_ID <span class="hljs-keyword">MATCHES</span> <span class="hljs-string">&quot;Clang&quot;</span>)<br>    <span class="hljs-keyword">add_compile_options</span>(-Wall -Wextra -Wpedantic)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-keyword">set</span>(CMAKE_MODULE_PATH <span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/cmake)<br><br><span class="hljs-comment"># Set configure_file</span><br><span class="hljs-keyword">set</span> (CONFIGURE_DIR_PATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/build/config)<br><span class="hljs-keyword">configure_file</span> (<br>        <span class="hljs-string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/src/config.h.in&quot;</span><br>        <span class="hljs-string">&quot;$&#123;CONFIGURE_DIR_PATH&#125;/config.h&quot;</span>)<br><br><span class="hljs-comment"># Initialize custom options</span><br><span class="hljs-keyword">option</span> (ENABLE_DEBUG_CANVAS <span class="hljs-string">&quot;Enable debug canvas to draw debug image&quot;</span> <span class="hljs-keyword">OFF</span>)<br><span class="hljs-keyword">option</span> (ENABLE_RECORDING <span class="hljs-string">&quot;Enable recording of raw camera image&quot;</span> <span class="hljs-keyword">OFF</span>)<br><span class="hljs-keyword">option</span> (ENABLE_OPENVINO <span class="hljs-string">&quot;Enable openvino to identify buff&quot;</span> <span class="hljs-keyword">OFF</span>)<br><span class="hljs-keyword">option</span> (ENABLE_ROS <span class="hljs-string">&quot;Enable ROS to visualize positions&quot;</span> <span class="hljs-keyword">OFF</span>)<br><br><span class="hljs-comment"># Set the output executable file name:</span><br><span class="hljs-comment"># When compiling in the ROS environment, the output executable file name will be the node name.</span><br><span class="hljs-comment"># Otherwise, the output file name will be the project name.</span><br><span class="hljs-keyword">if</span> (ENABLE_ROS)<br>    <span class="hljs-keyword">set</span>(EXECUTABLE_NAME main)<br><span class="hljs-keyword">else</span> ()<br>    <span class="hljs-keyword">set</span>(EXECUTABLE_NAME <span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>)<br>    <span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/build)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># Find non-ros packages</span><br><span class="hljs-keyword">find_package</span>(OpenCV <span class="hljs-number">4.7</span> REQUIRED)<br><span class="hljs-keyword">find_package</span>(HikCameraSDK REQUIRED)<br><br><span class="hljs-keyword">if</span> (ENABLE_OPENVINO)<br>    <span class="hljs-keyword">find_package</span>(OpenVINO REQUIRED)<br>    <span class="hljs-keyword">set</span>(OpenVINO_LIB openvino::runtime)<br><span class="hljs-keyword">endif</span> (ENABLE_OPENVINO)<br><br><span class="hljs-comment"># Include project source directory</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src <span class="hljs-variable">$&#123;CONFIGURE_DIR_PATH&#125;</span>)<br><br><span class="hljs-comment"># Recursively search for all source files under the &#x27;src&#x27; folder and store them into UGAS_SOURCE variable</span><br><span class="hljs-comment"># Flag &#x27;CONFIGURE_DEPENDS&#x27; asks cmake to detect GLOB result changes so no need to rerun cmake when adding a new source file.</span><br><span class="hljs-keyword">file</span>(GLOB_RECURSE UGAS_SOURCE CONFIGURE_DEPENDS<br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/*.cpp<br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/*.cc)<br><br><span class="hljs-comment"># Find ros packages &amp; add source files to compilation</span><br><span class="hljs-keyword">if</span> (ENABLE_ROS)<br>    <span class="hljs-keyword">find_package</span> (ament_cmake_auto REQUIRED)<br>    ament_auto_find_build_dependencies ()<br>    ament_auto_add_executable(<span class="hljs-variable">$&#123;EXECUTABLE_NAME&#125;</span> <span class="hljs-variable">$&#123;UGAS_SOURCE&#125;</span>)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;EXECUTABLE_NAME&#125;</span> <span class="hljs-variable">$&#123;UGAS_SOURCE&#125;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># Link libraries</span><br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;EXECUTABLE_NAME&#125;</span> <span class="hljs-variable">$&#123;OpenCV_LIBS&#125;</span> <span class="hljs-variable">$&#123;HikCameraSDK_LIB&#125;</span> <span class="hljs-variable">$&#123;OpenVINO_LIB&#125;</span> -lpthread)<br><br><span class="hljs-comment"># Install package</span><br><span class="hljs-keyword">if</span> (ENABLE_ROS)<br>    ament_auto_package()<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><h3 id="使用ninja构建"><a href="#使用ninja构建" class="headerlink" title="使用ninja构建"></a>使用ninja构建</h3><h4 id="概念——生成器"><a href="#概念——生成器" class="headerlink" title="概念——生成器"></a>概念——生成器</h4><p>CMake生成器负责为底层构建系统编写输入文件(例如Makefile)。<br>运行<code>cmake--help</code>将显示可用的生成器。<br>CMake包括不同类型的生成器，如命令行生成器、IDE生成器和其他生成器。</p><ol><li>命令行生成工具生成器<br>这些生成器用于命令行构建工具，如Make和Ninja。</li><li>IDE构建工具生成器<br>这些生成器用于集成开发环境，其中包括它们自己的编译器。例如Visual Studio和Xcode，它们本身就包含一个编译器。</li><li>其他生成器<br>这些生成器创建配置并与其他IDE工具共同工作，并且必须包含在IDE或命令行生成器中。</li></ol><table><thead><tr><th>Note</th><th>在本例中，ninja是通过命令sudo apt-get install ninja-build安装的。</th></tr></thead></table><h4 id="调用生成器"><a href="#调用生成器" class="headerlink" title="调用生成器"></a>调用生成器</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> cmake .. <span class="hljs-literal">-G</span> Ninja<br><br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br>build.ninja  CMakeCache.txt  CMakeFiles  cmake_install.cmake  rules.ninja<br></code></pre></td></tr></table></figure><p>CMake将生成所需的Ninja构建文件，这些文件可以通过使用Ninja命令运行。</p><h4 id="实例：使用Ninja编译UGAS"><a href="#实例：使用Ninja编译UGAS" class="headerlink" title="实例：使用Ninja编译UGAS"></a>实例：使用Ninja编译UGAS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/ros2_ws/src &amp; <span class="hljs-built_in">cd</span> ~/ros2_ws                   <span class="hljs-comment">#创建工作区文件夹</span><br><span class="hljs-built_in">cp</span> -r ~/Desktop/UGAS ./src/ugas                         <span class="hljs-comment">#拷贝目录</span><br>colcon build --packages-select ugas --cmake-args  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DENABLE_ROS=ON -GNinja<br><span class="hljs-built_in">source</span> ./install/local_setup.bash                       <span class="hljs-comment">#配置该功能包环境</span><br>ros2 run ugas main                                      <span class="hljs-comment">#运行一个节点</span><br></code></pre></td></tr></table></figure><p>tips:</p><ul><li>colcon：使用colcon构建ros包，相当于ros1中的catkin工具</li><li>cp -r Dir&#x2F; &#x2F;home&#x2F;test ：将Dir目录copy到test目录下</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机基础技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>my technology stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu使用技巧</title>
    <link href="/2023/07/25/Ubuntu%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/07/25/Ubuntu%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>一些使用技巧和操作命令整理合集</p><span id="more"></span> <h3 id="在-Ubuntu-Linux-上安装-Deb-文件的-3-种方法"><a href="#在-Ubuntu-Linux-上安装-Deb-文件的-3-种方法" class="headerlink" title="在 Ubuntu Linux 上安装 Deb 文件的 3 种方法"></a>在 Ubuntu Linux 上安装 <code>Deb</code> 文件的 3 种方法</h3><blockquote><ol><li>使用软件中心安装</li><li>使用命令行安装：</li></ol></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">sudo apt install path<span class="hljs-emphasis">_to_deb_file</span><br><span class="hljs-emphasis">或者</span><br><span class="hljs-emphasis">sudo dpkg -i path_to_deb_</span>file<br></code></pre></td></tr></table></figure><p>在这两个命令中，使用已下载的 deb 文件的路径和名称来替换 path_to_deb_file 。</p><h3 id="关于权限和存储"><a href="#关于权限和存储" class="headerlink" title="关于权限和存储"></a>关于权限和存储</h3><p>访问权限：</p><ul><li><p>读取 <code>r</code> ：数字表示 4，允许查看、下载文件内容、显示目录列表；</p></li><li><p>写入 <code>w</code> ：数字表示 2，允许修改文件内容，允许在目录中新建、移动、删除文件或子目录；</p></li><li><p>可执行 <code>x</code> ：数字表示 1，允许运行程序、切换目录。</p></li></ul><p>归属（所有权）</p><ul><li>属主：拥有该文件或目录的用户帐号；</li><li>属组：拥有该文件或目录的组帐号。</li></ul><p>操作对象</p><pre><code class="hljs">u 文件属主权限g 同组用户权限o 其它用户权限a 所有用户（包括以上三种）s（setuid）：该位是让普通用户可以以 root 用户的角色运行只有 root 帐号才能运行的程序或命令</code></pre><p>权限设定</p><pre><code class="hljs">+ 增加权限- 取消权限= 设置权限</code></pre><h3 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h3><h4 id="相对路径的表现形式"><a href="#相对路径的表现形式" class="headerlink" title="相对路径的表现形式"></a>相对路径的表现形式</h4><ul><li>绝对路径：从 &#x2F; （根目录）为起点的路径。</li><li>相对路径：以当前目录为起点（当前文件所在的路径相对于其它文件或文件夹的路径关系）。</li></ul><table><thead><tr><th>命令行</th><th>说明</th></tr></thead><tbody><tr><td>直接使用目录名或文件名</td><td>表示当前工作目录中的子目录、文件的位置</td></tr><tr><td>.开头</td><td>表示以当前的工作目录作为起点，如 .&#x2F;etc</td></tr><tr><td>..开头</td><td>表示以当前目录的上一级目录（父目录）作为起点，如 ..&#x2F;etc</td></tr><tr><td>以 “~用户名” 形式开头</td><td>表示以指定用户名的宿主目录作为起点</td></tr><tr><td>以 “~” 形式开头</td><td>表示以当前用户的宿主目录作为起点</td></tr></tbody></table><h4 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a><code>cd</code> 命令</h4><table><thead><tr><th>命令行</th><th>说明</th></tr></thead><tbody><tr><td>cd&#x2F;</td><td>切换到系统根目录</td></tr><tr><td>cd~或cd</td><td>切换到当前用户的宿主目录（家目录）</td></tr><tr><td>cd-</td><td>切换到 上一次执行cd命令 之前所在的目录</td></tr></tbody></table><h4 id="ls-命令：用于显示指定工作目录下的文件及子目录"><a href="#ls-命令：用于显示指定工作目录下的文件及子目录" class="headerlink" title="ls 命令：用于显示指定工作目录下的文件及子目录"></a><code>ls</code> 命令：用于显示指定工作目录下的文件及子目录</h4><p>可使用命令 ls –help、man ls 查看所有参数。</p><p><a href="https://blog.csdn.net/duanbaoke/article/details/115462030">https://blog.csdn.net/duanbaoke/article/details/115462030</a></p><blockquote><p>3.1  通配符:参数可结合通配符一起使用。</p></blockquote><table><thead><tr><th>命令行</th><th>说明</th></tr></thead><tbody><tr><td>？</td><td>代表任意一个字符，只能占一个字符；</td></tr><tr><td>*</td><td>代表任意数个字符，可以是0个或多个；</td></tr><tr><td>[]</td><td>表示可以匹配字符组中的任意一个字符，每个通配符只匹配一次，多个通配符可一起使用，不区分大小写。如ls [abc]，ls [a-c]，ls [1ab][1ab]。</td></tr></tbody></table><blockquote><p>3.2 ls-l:查看某一个目录会得到一个7个字段的列表。</p></blockquote><h4 id="alias：设置命令的别名"><a href="#alias：设置命令的别名" class="headerlink" title="alias：设置命令的别名"></a><code>alias</code>：设置命令的别名</h4><p><code>alias [别名]=‘指令名称’ </code>，等于号左右不能有空格，指令名称必须是可执行的完整的命令；</p><p>参数：若不加任何参数，则列出目前所有的别名设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span> 命令别名      <span class="hljs-comment">#查看别名</span><br><br><span class="hljs-built_in">unalias</span> 命令别名   <span class="hljs-comment">#取消命令别名</span><br></code></pre></td></tr></table></figure><h4 id="du-选项-文件或目录"><a href="#du-选项-文件或目录" class="headerlink" title="du [选项] [文件或目录...] \"></a><code>du [选项] [文件或目录...] </code>\</h4><p>统计指定目录（或文件）所占用磁盘空间的大小。</p><p>有-a,-s,-h,-c,–math-depth&#x3D;n等选项，要用自己查</p><h4 id="修改权限命令：chmod"><a href="#修改权限命令：chmod" class="headerlink" title="修改权限命令：chmod"></a>修改权限命令：<code>chmod</code></h4><p>命令格式：<code>chmod [ugoa][+-=][rwx]文件或目录 </code>；<br>或用数字表示：<code>chmod [777] </code>文件或目录 ，默认为操作所有用户a；</p><p> 常用格式： <code>-R</code>：递归修改指定目录下所有子项的权限；</p><h4 id="设置目录和文件的默认权限-umask"><a href="#设置目录和文件的默认权限-umask" class="headerlink" title="设置目录和文件的默认权限 umask"></a>设置目录和文件的默认权限 <code>umask</code></h4><p>umask查看：umask<br>umask设置：umask 000，umask 022 #新建目录或者文件，再查看权限</p><p>umask（权限反码） 作用：</p><ul><li>控制新建的文件或者目录的权限默认值</li><li>默认权限去除umask的权限为新建的文件或者目录的权限</li></ul><p>新建的文件或者目录的权限为默认最大权限减去umask权限。<br>umask 默认值为 <code>022</code>，普通文件的最大默认权限.为 <code>666</code>，目录的最大默认权限为 <code>777</code>;</p><h4 id="ln"><a href="#ln" class="headerlink" title="ln - \"></a><code>ln -</code> \</h4><p>为文件或目录创建链接文件，在文件之间建立连接。</p><p>链接文件类型：</p><ul><li>软链接（符号链接）(symbolic link):产生一个特殊的档案，该档案的内容是指向另一个档案的位置</li><li>硬链接(hard link):一个档案可以有多个文件名（一个文件可以有好几个文件名，只有将最后一个文件名从 磁盘上删除，才能把这个文件删掉）</li></ul><p>知识点：<br>参考：<a href="https://blog.csdn.net/duanbaoke/article/details/115485100">https://blog.csdn.net/duanbaoke/article/details/115485100</a></p><ul><li>在Linux中，文件名和文件类型是分开存储的，</li><li>在Linux中，只有文件的<code>硬链接数==0</code> 才会被删除</li><li>使用 ls -l 可以查看一个文件的硬链接数量<br>在日常工作中，几乎不会创建文件的硬链接，只有超级用户才能建立目录的硬连接。</li><li>硬链接是存在同一个档案系统中，而软链接却可以跨越不同的档案系统</li><li>ln- 在文件间产生连接。默认产生硬链接，有-s选项，则产生软链接：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">创建硬链接：<span class="hljs-built_in">ln</span> 源文件 目标位置<br><span class="hljs-built_in">ln</span> -s 源文件或目录名... 链接文件或目标位置<br></code></pre></td></tr></table></figure></li></ul><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h4><p>将需要复制的文件或目录（源）重建一份，并保存为新的文件或目录。</p><p><code>cp[选项]...源文件或目录.…目标文件或目录...</code><br>-f,-i,-p,-r四个选项。<br>注：复制多个文件或目录时，目标位置必须是目录，且目标目录必须已存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -p test.rb /home/test <br><span class="hljs-comment">#将test.rb copy到test目录，并且保留原文件的属性</span><br><br><span class="hljs-built_in">cp</span> -p test.rb /home/test/haha.rp  <br><span class="hljs-comment">#将test.rb copy到test目录，并将文件名修改为haha.rp</span><br><br><span class="hljs-built_in">cp</span> -r Dir/ /home/test      <br><span class="hljs-comment">#将Dir目录copy到test目录下</span><br><br><span class="hljs-built_in">cp</span> -fr Dir/* /home/test    <br><span class="hljs-comment">#将Dir下面的所有文件强制copy到test目录下</span><br><br><span class="hljs-built_in">cp</span> /root/&#123;1,2,3&#125;.txt ./    <br><span class="hljs-comment">#批量复制三个同扩展文件到当前目录</span><br><br><span class="hljs-built_in">cp</span> test.rb&#123;,.bak&#125;          <br><span class="hljs-comment">#备份test.rb，并在尾部加上.bak后缀</span><br></code></pre></td></tr></table></figure><h4 id="rm-删除-unlink-文件"><a href="#rm-删除-unlink-文件" class="headerlink" title="rm :删除 (unlink) 文件"></a><code>rm</code> :删除 (unlink) 文件</h4><p>常用选项：-f,-i,-r</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> test.php        <span class="hljs-comment">#删除文件需要确认</span><br><br><span class="hljs-built_in">rm</span> -f test.php     <span class="hljs-comment">#强制删除文件不确认</span><br><br><span class="hljs-built_in">rm</span> -rfv ./test     <span class="hljs-comment">#递归强制删除当前的test目录，并显示删除的详细过程</span><br><br><span class="hljs-built_in">rm</span> -rf aa/         <span class="hljs-comment">#递归强制删除aa目录下的所有</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>删除文件可以直接使用 rm 命令，若删除目录则必须配合选项 “ -r “，因为目录下有 . 和 .. 两个隐藏子目录；</li><li>不要直接删除系统中已有的目录或配置文件，以避免出现意外故障；</li><li>删除目录下文件时建议最好先切换到目录下再执行 rm -rf 命令 <br>（ 1 . cd aa 2 . rm -rf aa&#x2F;）</li></ul><h4 id="mv：-移动文件或目录、对单个文件进行重命名。"><a href="#mv：-移动文件或目录、对单个文件进行重命名。" class="headerlink" title="mv： 移动文件或目录、对单个文件进行重命名。\"></a><code>mv</code>： 移动文件或目录、对单个文件进行重命名。\</h4><p><code>mv [选项] 源文件或目录 目标文件或目录</code></p><ul><li>将指定的文件或目录转移位置；</li><li>如果目标位置与源位置相同，则相当于重命名操作。</li></ul><h4 id="rename-批量修改文件名"><a href="#rename-批量修改文件名" class="headerlink" title="rename:批量修改文件名"></a><code>rename</code>:批量修改文件名</h4><p><code>rename 旧字符 新字符 文件名</code><br><code>rename 旧文件 新文件 目标文件</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">rename</span> <span class="hljs-keyword">abc</span> def <span class="hljs-keyword">abc</span>    # 修改 <span class="hljs-keyword">abc</span> 名字为 dec<br></code></pre></td></tr></table></figure><h4 id="tree：在终端输入下面的指令查看文件结构"><a href="#tree：在终端输入下面的指令查看文件结构" class="headerlink" title="tree：在终端输入下面的指令查看文件结构"></a><code>tree</code>：在终端输入下面的指令查看文件结构</h4><p>安装tree:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> tree<br></code></pre></td></tr></table></figure><h3 id="仓库克隆"><a href="#仓库克隆" class="headerlink" title="仓库克隆"></a>仓库克隆</h3><p> linux 系统下 <code>github 仓库的克隆</code>可以直接在终端通过指令克隆。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ttroy50/</span>cmake-examples.git cmake-examples<br></code></pre></td></tr></table></figure><p>第一行是跳转至 home 目录，第二行是将github链接地址的内容克隆到 cmake-example 目录下，输入后会自动新建一个cmake-example 目录并把下载的代码放进去，十分方便。</p><h3 id="linux设置串口别名"><a href="#linux设置串口别名" class="headerlink" title="linux设置串口别名"></a>linux设置串口别名</h3><p><a href="https://blog.csdn.net/beiguodexueCSDN/article/details/103099456">https://blog.csdn.net/beiguodexueCSDN/article/details/103099456</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>my technology stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>相机标定</title>
    <link href="/2023/07/25/%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/"/>
    <url>/2023/07/25/%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p>几步完成相机标定！（图传也有相机，也可以标定）</p><span id="more"></span> <ul><li>step 1:打印标定板（不能有折痕，要哑光纸打印，A3大小），贴在碳板上，一定要平整。</li><li>step 2:用需要标定的相机拍照，设定好需要的分辨率，拍20-30张不同角度的标定板照片，要求标定板要占大部分相片区域（80%以上）</li><li>step 3:使用matlab进行标定。<br>关于options：<ul><li>(1)Radial Distortion：径向畸变<br> 2 Coefficients选项:使用四次多项式来估计透镜的径向畸变,适用于一般相机<br> 3 Coefficients选项:使用六次多项式来估计透镜的径向畸变,仅适用于大视场相机</li><li>(2)Compute：<br> 关于Skew:假设X轴和Y轴不垂直。这意味着图像像素不是矩形的。所以，Skew选项一般不需要选择<br> 关于Tangential Distortion：当镜头的主轴与相机传感器不垂直时，会发生切向失真<br><code>选择options的要求是使平均误差尽量小，低于0.5为可用</code></li></ul></li><li>step 4：将matlab标定得到的畸变参数写成opencv可用的畸变系数的排列（k<sub>1</sub>,k<sub>2</sub>,p<sub>1</sub>,p<sub>2</sub>,k<sub>3</sub>）,其中三个径向畸变，两个切向畸变<ul><li>RadialDistortion里面的两个参数对应k<sub>1</sub>和k<sub>2</sub>，k<sub>3</sub>为0（对于鱼眼镜头等径向畸变特别大的才需要计算k3）</li><li>TangentialDistortion里面的两个参数对应p<sub>1</sub>,p<sub>2</sub></li><li>记录大疆图传相机数据：<br>  畸变系数：（-0.285400532140372、0.106341621768377、 0、0、   -0.0203255154424868）<br>  内参矩阵:(matlab直接计算得到)<br>$$\begin{matrix}<br>870.536594077599&amp;0&amp;0\<br>0&amp;871.002811118890&amp;0\<br>959.879173875982&amp;554.055610210946&amp;1\<br>\end{matrix}$$<br>需要将上方的内参矩阵转置之后才能给opencv使用：<br>$$\begin{matrix}<br>870.536594077599&amp;0&amp;959.879173875982\<br>0&amp;871.00281111889&amp;554.055610210946\<br>0&amp;0&amp;1\<br>\end{matrix}$$</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机视觉</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim</title>
    <link href="/2023/07/25/vim/"/>
    <url>/2023/07/25/vim/</url>
    
    <content type="html"><![CDATA[<p>vim共分为3种模式，分别是<code>命令模式</code>、<code>输入模式</code>、<code>底线命令模式</code>。</p><span id="more"></span> <h4 id="1-命令模式"><a href="#1-命令模式" class="headerlink" title="1. 命令模式"></a>1. 命令模式</h4><p>启动vim，默认进入命令模式。此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。<br>常用命令：</p><ul><li><code>i</code> 切换到输入模式，以输入字符。</li><li><code>x</code> 删除当前光标所在处的字符。</li><li><code>:</code> 切换到底线命令模式，以在最底一行输入命令。</li></ul><h4 id="2-输入模式"><a href="#2-输入模式" class="headerlink" title="2. 输入模式"></a>2. 输入模式</h4><p>正常输入即可。<br>按<code>ESC</code>退出输入模式，切换到命令模式。</p><h4 id="3-底线命令模式"><a href="#3-底线命令模式" class="headerlink" title="3. 底线命令模式"></a>3. 底线命令模式</h4><p>在命令模式下按下 <code>:</code>（英文冒号）进入底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，基本命令（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li><li>wq 保存并退出<br>按<code>ESC</code>退出底线命令模式。</li></ul><h4 id="4-实例"><a href="#4-实例" class="headerlink" title="4. 实例"></a>4. 实例</h4><p>step1 :在终端输入：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vim</span> runoob.txt<br></code></pre></td></tr></table></figure><p>使用vim建立一个名为 runoob.txt 的文件。<br>直接输入 vim 文件名 就能够进入 vi 的一般模式了。<br><code>记得 vi 后面一定要加文件名，不管该文件存在与否！</code></p><p>step 2:按<code>i</code>进入编辑模式，编辑文件内容</p><p>step 3:按<code>ESC</code>退出编辑模式</p><p>step 4：按<code>:wq</code>保存退出</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>some tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>creat your own blogs</title>
    <link href="/2023/07/25/creat-your-own-blogs/"/>
    <url>/2023/07/25/creat-your-own-blogs/</url>
    
    <content type="html"><![CDATA[<p>通过github创建自己的博客</p><span id="more"></span> <p><a href="https://blog.csdn.net/Dabie_haze/article/details/117407833/">https://blog.csdn.net/Dabie_haze/article/details/117407833\</a><br><a href="https://zhuanlan.zhihu.com/p/111614119">https://zhuanlan.zhihu.com/p/111614119</a></p><p>补充：</p><ul><li>安装npm的教程：<br><a href="https://blog.csdn.net/yyuggjggg/article/details/120836231#:~:text=1.%E5%8F%8C%E5%87%BB%202%EF%BC%9A%E6%8C%89%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C%203%EF%BC%9A%E6%8C%89%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C%204%EF%BC%9A%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%EF%BC%8C%E7%82%B9%E5%87%BB%E4%B8%8B%E4%B8%80%E6%AD%A5,5%E7%82%B9%E5%87%BBnext%EF%BC%8C%E5%85%B6%E4%BA%92%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%206.%E6%8E%A5%E4%B8%8B%E6%9D%A5%E4%B8%80%E7%9B%B4%E6%98%AF%E2%80%9Cnext%E2%80%9D%EF%BC%8C%E7%9B%B4%E5%88%B0%E6%9C%80%E5%90%8E%E7%82%B9%E5%87%BBfinish%207.%E6%9F%A5%E7%9C%8B%E5%90%84%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%AE%E5%BD%95%208.%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%AD%A3%E5%B8%B8">https://blog.csdn.net/yyuggjggg/article/details/120836231#:~:text=1.%E5%8F%8C%E5%87%BB%202%EF%BC%9A%E6%8C%89%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C%203%EF%BC%9A%E6%8C%89%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C%204%EF%BC%9A%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%EF%BC%8C%E7%82%B9%E5%87%BB%E4%B8%8B%E4%B8%80%E6%AD%A5,5%E7%82%B9%E5%87%BBnext%EF%BC%8C%E5%85%B6%E4%BA%92%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%206.%E6%8E%A5%E4%B8%8B%E6%9D%A5%E4%B8%80%E7%9B%B4%E6%98%AF%E2%80%9Cnext%E2%80%9D%EF%BC%8C%E7%9B%B4%E5%88%B0%E6%9C%80%E5%90%8E%E7%82%B9%E5%87%BBfinish%207.%E6%9F%A5%E7%9C%8B%E5%90%84%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%AE%E5%BD%95%208.%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%AD%A3%E5%B8%B8</a></li><li>npm使用国内淘宝镜像的方法：<br><a href="https://blog.csdn.net/DongShanYuXiao/article/details/129902599">https://blog.csdn.net/DongShanYuXiao/article/details/129902599</a></li><li>获取&#x2F;更新SSH：<br><a href="https://blog.csdn.net/qq_36667170/article/details/79094257">https://blog.csdn.net/qq_36667170/article/details/79094257</a></li><li>Hexo初始化报错：</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">fatal: could not <span class="hljs-keyword">create</span> <span class="hljs-keyword">work</span> tree dir <span class="hljs-string">&#x27;C:\Program Files\Hexo_blog\hexo\ZoeChen04616.github.io&#x27;</span>: Permission denied<br><br></code></pre></td></tr></table></figure><p>是权限不够，不能新建文件夹所以不能建立工作目录。在文件夹属性-安全-user找写入权限添加上就好。</p><ul><li><p>Hexo部署时报错：Error: Spawn failed<br> <a href="https://blog.csdn.net/qq_45020818/article/details/126949337">https://blog.csdn.net/qq_45020818/article/details/126949337</a> </p></li><li><p>关于hexo博客更换主题：<br><a href="https://zhuanlan.zhihu.com/p/385525053">https://zhuanlan.zhihu.com/p/385525053</a></p></li><li><p>一些主题推荐：<br><a href="https://zhuanlan.zhihu.com/p/137679728/">https://zhuanlan.zhihu.com/p/137679728\</a><br><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></li><li><p>hexo常用口令：</p><ul><li><code>hexo clean</code> : 清除缓存</li><li><code>hexo g</code>：生成静态网页</li><li><code>hexo d</code>：同步远程github仓库</li><li><code>hexo s</code>：本地预览效果</li><li><code>hexo new post &quot;article title&quot;</code> ： 新建一篇文章</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>some skills about web</tag>
      
      <tag>hexo</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>积累向的视觉小知识</title>
    <link href="/2023/07/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E8%A7%86%E8%A7%89%E6%95%99%E7%A8%8B/"/>
    <url>/2023/07/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E8%A7%86%E8%A7%89%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>没有特定的主题，遇到有啥不会的就往里补充。</p><span id="more"></span> <h4 id="1-O1-O2-O3-Os优化（gcc）"><a href="#1-O1-O2-O3-Os优化（gcc）" class="headerlink" title="1.-O1,-O2,-O3,-Os优化（gcc）"></a>1.-O1,-O2,-O3,-Os优化（gcc）</h4><ol><li><p>使用-Q –help &#x3D;optimizers来获取每个优化标识所启用的优化选项。</p></li><li><p>解释：</p><blockquote><ol><li>-O，-O1：</li></ol></blockquote></li></ol><p>这两个命令的效果是一样的，目的都是在不影响编译速度的前提下，尽量采用一些优化算法降低代码大小和可执行代码的运行速度。</p><blockquote><ol start="2"><li>-O2:</li></ol></blockquote><p>该优化选项会牺牲部分编译速度，除了执行-O1所执行的所有优化之外，还会采用几乎所有的目标配置支持的优化算法，用以提高目标代码的运行速度。</p><blockquote><ol start="3"><li>-O3:</li></ol></blockquote><p>该选项除了执行-O2所有的优化选项之外，一般都是采取很多向量化算法，提高代码的并行执行程度，利用现代CPU中的流水线，Cache等。</p><p>这个选项会提高执行代码的大小，当然会降低目标代码的执行时间。</p><blockquote><ol start="4"><li>-Os:</li></ol></blockquote><p>这个优化标识和-O3有异曲同工之妙，当然两者的目标不一样，-O3的目标是宁愿增加目标代码的大小，也要拼命的提高运行速度，但是这个选项是在-O2的基础之上，尽量的降低目标代码的大小，这对于存储容量很小的设备来说非常重要。为了降低目标代码大小，会禁用下列优化选项，一般就是压缩内存中的对齐空白(alignment padding)</p><blockquote><ol start="5"><li>-Ofast:</li></ol></blockquote><p>该选项将不会严格遵循语言标准，除了启用所有的-O3优化选项之外，也会针对某些语言启用部分优化。如：-ffast-math </p><blockquote><ol start="6"><li>-Og:</li></ol></blockquote><p>该标识会精心挑选部分与-g选项不冲突的优化选项，当然就能提供合理的优化水平，同时产生较好的可调试信息和对语言标准的遵循程度。</p><h4 id="2-动态连接库-共享库-和静态连接库"><a href="#2-动态连接库-共享库-和静态连接库" class="headerlink" title="2.动态连接库(共享库)和静态连接库"></a>2.动态连接库(共享库)和静态连接库</h4><p>1.静态链接库 <code>＊.a</code><br>将需要调用的函数统一链接到可执行文件中，成为可执行文件的一部分。</p><ul><li>优点：<br>运行速度快（因为已经链接到可执行文件中了）<br>不需要重新编译代码就可以链接<br>(因为已经和可执行文件链接在一起了，可执行文件调用链接库时可以直接跳转)</li><li>缺点：<br>占用内存，当多个程序调用相同的函数时，内存中就会存在该函数的多个备份</li></ul><p>2.动态链接库 <code>＊.so</code><br>仅加入被调函数的描述信息，当程序执行时由运行链接加载库。<br>仅当被装入内存时，才开始运行。相对于静态链接库，动态链接库只会在内存中保留一份。</p><ul><li>优点：不占用内存；可以实现进程之间的资源共享。<br>（因此动态库也称为共享库） </li><li>缺点：速度比静态的慢</li></ul><h4 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3.环境变量"></a>3.环境变量</h4><ol><li>定义：在操作系统中用来指定操作系统运行环境的一些参数，要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到path中指定的路径去找。<br>用户通过设置环境变量，来更好的运行进程。</li></ol><ul><li>windows系统中的环境变量：PATH<br>可以直接在终端输入echo %PATH%查看系统所有的环境变量</li><li>linux系统中的环境变量： export<br>可以直接在终端输入export查看系统所有的环境变量</li><li>暂时不管CMakeLists里面的环境变量</li></ul><ol start="2"><li>linux中，添加路径到环境变量里面的方法：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">echo <span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;~/.aspera/connect/bin/:<span class="hljs-variable">$PATH</span>&quot;</span> &gt;&gt;.bashrc<br></code></pre></td></tr></table></figure>即，添加到.bashrc的脚本中。（也可以用vim直接编辑.bashrc内容）</li></ol><ul><li><p>.bashrc是一个配置文件，也是一个隐藏文件，存在于用户的家目录~下，需要用<code>ls -a</code>才能查看到，每次登陆bash，这个文件就会被执行一次，在文件内的代码会被运行一遍。<br>参考：<a href="https://cloud.tencent.com/developer/article/1457751">https://cloud.tencent.com/developer/article/1457751</a></p></li><li><p>bash: 终端的那个框</p></li><li><p>echo 输出命令</p></li><li><p><code>&gt;&gt;</code>表示一个类似管道的意思</p></li></ul><h4 id="4-opencv配置环境"><a href="#4-opencv配置环境" class="headerlink" title="4.opencv配置环境"></a>4.opencv配置环境</h4><p>查看UGAS的opencv配置，后面新建项目如果要使用opencv，直接将.props文件复制粘贴到项目文件夹，再在VS里面<code>添加现有属性表</code>即可。</p><h4 id="5-分辨率"><a href="#5-分辨率" class="headerlink" title="5.分辨率"></a>5.分辨率</h4><p>分辨率只是数学上的一个概念，跟任何设备无关。<br>它仅仅是用来表示横向和纵向有多少个像素点而已，可以粗略理解为图片的尺寸以及清晰度。<br>参考：<a href="https://zhuanlan.zhihu.com/p/424498440">https://zhuanlan.zhihu.com/p/424498440</a><br> （分辨率？1080P、2K、4K?英寸？）</p><h4 id="6-image-distorition：图像畸变"><a href="#6-image-distorition：图像畸变" class="headerlink" title="6. image distorition：图像畸变"></a>6. image distorition：图像畸变</h4><h4 id="7-oop-python面向对象编程"><a href="#7-oop-python面向对象编程" class="headerlink" title="7. oop: python面向对象编程"></a>7. oop: python面向对象编程</h4><h4 id="8-markdown怎么写下标：例如k1"><a href="#8-markdown怎么写下标：例如k1" class="headerlink" title="8. markdown怎么写下标：例如k1"></a>8. markdown怎么写下标：例如k<sub>1</sub></h4><h4 id="9-markdown怎么表示矩阵："><a href="#9-markdown怎么表示矩阵：" class="headerlink" title="9.markdown怎么表示矩阵："></a>9.markdown怎么表示矩阵：</h4><p>$$\begin{matrix}<br>0&amp;1&amp;1\<br>1&amp;1&amp;0\<br>1&amp;0&amp;1\<br>\end{matrix}$$</p>]]></content>
    
    
    <categories>
      
      <category>计算机视觉</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/25/hello-world/"/>
    <url>/2023/07/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>This is my very first post. </p><span id="more"></span> <p>I hope the blogs can record my learning journey, and through my learning journey, I could gradually enrich my little knowledge planet.</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
